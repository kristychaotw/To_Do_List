/*! For license information please see main.b9d2c8c64b3ccbb509bf.js.LICENSE.txt */
(()=>{"use strict";var e={748:(e,t,n)=>{var r=n(466),a=n(767);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,o={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(o[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,a,l,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),S=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),_=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),I=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),L=Symbol.for("react.memo"),D=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var O=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=O&&e[O]||e["@@iterator"])?e:null}var F,R=Object.assign;function A(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var $=!1;function j(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),l=r.stack.split("\n"),i=a.length-1,o=l.length-1;1<=i&&0<=o&&a[i]!==l[o];)o--;for(;1<=i&&0<=o;i--,o--)if(a[i]!==l[o]){if(1!==i||1!==o)do{if(i--,0>--o||a[i]!==l[o]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=o);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?A(e):""}function U(e){switch(e.tag){case 5:return A(e.type);case 16:return A("Lazy");case 13:return A("Suspense");case 19:return A("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case _:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case I:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case L:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case D:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return R({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return R({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(te(n)){if(1<n.length)throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function le(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=R({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ee=null,Ce=null;function _e(e){if(e=ga(e)){if("function"!=typeof Se)throw Error(l(280));var t=e.stateNode;t&&(t=ya(t),Se(e.stateNode,e.type,t))}}function xe(e){Ee?Ce?Ce.push(e):Ce=[e]:Ee=e}function Ie(){if(Ee){var e=Ee,t=Ce;if(Ce=Ee=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Pe(e,t){return e(t)}function Te(){}var Ne=!1;function Le(e,t,n){if(Ne)return e(t,n);Ne=!0;try{return Pe(e,t,n)}finally{Ne=!1,(null!==Ee||null!==Ce)&&(Te(),Ie())}}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=ya(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var ze=!1;if(c)try{var Oe={};Object.defineProperty(Oe,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Oe,Oe),window.removeEventListener("test",Oe,Oe)}catch(ce){ze=!1}function Me(e,t,n,r,a,l,i,o,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Fe=!1,Re=null,Ae=!1,$e=null,je={onError:function(e){Fe=!0,Re=e}};function Ue(e,t,n,r,a,l,i,o,u){Fe=!1,Re=null,Me.apply(je,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(Be(e)!==e)throw Error(l(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return He(a),e;if(i===r)return He(a),t;i=i.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=i;else{for(var o=!1,u=a.child;u;){if(u===n){o=!0,n=a,r=i;break}if(u===r){o=!0,r=a,n=i;break}u=u.sibling}if(!o){for(u=i.child;u;){if(u===n){o=!0,n=i,r=a;break}if(u===r){o=!0,r=i,n=a;break}u=u.sibling}if(!o)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var qe=a.unstable_scheduleCallback,Ke=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,Ye=a.unstable_requestPaint,Xe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,lt=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ot(e)/ut|0)|0},ot=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,i=268435455&n;if(0!==i){var o=i&~a;0!==o?r=ft(o):0!=(l&=i)&&(r=ft(l))}else 0!=(i=n&~a)?r=ft(i):0!==l&&(r=ft(l));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(l=t&-t)||16===a&&0!=(4194240&l)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var yt=0;function bt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var wt,kt,St,Et,Ct,_t=!1,xt=[],It=null,Pt=null,Tt=null,Nt=new Map,Lt=new Map,Dt=[],zt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ot(e,t){switch(e){case"focusin":case"focusout":It=null;break;case"dragenter":case"dragleave":Pt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Mt(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&null!==(t=ga(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ft(e){var t=ma(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void Ct(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ga(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function At(e,t,n){Rt(e)&&n.delete(t)}function $t(){_t=!1,null!==It&&Rt(It)&&(It=null),null!==Pt&&Rt(Pt)&&(Pt=null),null!==Tt&&Rt(Tt)&&(Tt=null),Nt.forEach(At),Lt.forEach(At)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,_t||(_t=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,$t)))}function Ut(e){function t(t){return jt(t,e)}if(0<xt.length){jt(xt[0],e);for(var n=1;n<xt.length;n++){var r=xt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==It&&jt(It,e),null!==Pt&&jt(Pt,e),null!==Tt&&jt(Tt,e),Nt.forEach(t),Lt.forEach(t),n=0;n<Dt.length;n++)(r=Dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Dt.shift()}var Bt=w.ReactCurrentBatchConfig;function Vt(e,t,n,r){var a=yt,l=Bt.transition;Bt.transition=null;try{yt=1,Wt(e,t,n,r)}finally{yt=a,Bt.transition=l}}function Ht(e,t,n,r){var a=yt,l=Bt.transition;Bt.transition=null;try{yt=4,Wt(e,t,n,r)}finally{yt=a,Bt.transition=l}}function Wt(e,t,n,r){var a=qt(e,t,n,r);if(null===a)Br(e,t,r,Qt,n),Ot(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return It=Mt(It,e,t,n,r,a),!0;case"dragenter":return Pt=Mt(Pt,e,t,n,r,a),!0;case"mouseover":return Tt=Mt(Tt,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return Nt.set(l,Mt(Nt.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,Lt.set(l,Mt(Lt.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Ot(e,r),4&t&&-1<zt.indexOf(e)){for(;null!==a;){var l=ga(a);if(null!==l&&wt(l),null===(l=qt(e,t,n,r))&&Br(e,t,r,Qt,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else Br(e,t,r,null,n)}var Qt=null;function qt(e,t,n,r){if(Qt=null,null!==(e=ma(e=ke(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Yt=null,Xt=null;function Jt(){if(Xt)return Xt;var e,t,n=Yt,r=n.length,a="value"in Gt?Gt.value:Gt.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[l-t];t++);return Xt=a.slice(e,1<t?1-t:void 0)}function Zt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function en(){return!0}function tn(){return!1}function nn(e){function t(t,n,r,a,l){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?en:tn,this.isPropagationStopped=tn,this}return R(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=en)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=en)},persist:function(){},isPersistent:en}),t}var rn,an,ln,on={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=nn(on),sn=R({},on,{view:0,detail:0}),cn=nn(sn),fn=R({},sn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(rn=e.screenX-ln.screenX,an=e.screenY-ln.screenY):an=rn=0,ln=e),rn)},movementY:function(e){return"movementY"in e?e.movementY:an}}),dn=nn(fn),pn=nn(R({},fn,{dataTransfer:0})),hn=nn(R({},sn,{relatedTarget:0})),mn=nn(R({},on,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=R({},on,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vn=nn(gn),yn=nn(R({},on,{data:0})),bn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},wn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function En(){return Sn}var Cn=R({},sn,{key:function(e){if(e.key){var t=bn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?wn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?Zt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=nn(Cn),xn=nn(R({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),In=nn(R({},sn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Pn=nn(R({},on,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=R({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=nn(Tn),Ln=[9,13,27,32],Dn=c&&"CompositionEvent"in window,zn=null;c&&"documentMode"in document&&(zn=document.documentMode);var On=c&&"TextEvent"in window&&!zn,Mn=c&&(!Dn||zn&&8<zn&&11>=zn),Fn=String.fromCharCode(32),Rn=!1;function An(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Vn(e,t,n,r){xe(r),0<(t=Hr(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Wn=null;function Qn(e){Fr(e,0)}function qn(e){if(q(va(e)))return e}function Kn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Yn;if(c){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Yn=Xn}else Yn=!1;Gn=Yn&&(!document.documentMode||9<document.documentMode)}function Zn(){Hn&&(Hn.detachEvent("onpropertychange",er),Wn=Hn=null)}function er(e){if("value"===e.propertyName&&qn(Wn)){var t=[];Vn(t,Wn,e,ke(e)),Le(Qn,t)}}function tr(e,t,n){"focusin"===e?(Zn(),Wn=n,(Hn=t).attachEvent("onpropertychange",er)):"focusout"===e&&Zn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Wn)}function rr(e,t){if("click"===e)return qn(t)}function ar(e,t){if("input"===e||"change"===e)return qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ir(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function or(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=or(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=or(r)}}function sr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?sr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function cr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function dr(e){var t=cr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&sr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!e.extend&&l>r&&(a=r,r=l,l=a),a=ur(n,l);var i=ur(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),l>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var pr=c&&"documentMode"in document&&11>=document.documentMode,hr=null,mr=null,gr=null,vr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==hr||hr!==K(r)||(r="selectionStart"in(r=hr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ir(gr,r)||(gr=r,0<(r=Hr(mr,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}function br(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var wr={animationend:br("Animation","AnimationEnd"),animationiteration:br("Animation","AnimationIteration"),animationstart:br("Animation","AnimationStart"),transitionend:br("Transition","TransitionEnd")},kr={},Sr={};function Er(e){if(kr[e])return kr[e];if(!wr[e])return e;var t,n=wr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return kr[e]=n[t];return e}c&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete wr.animationend.animation,delete wr.animationiteration.animation,delete wr.animationstart.animation),"TransitionEvent"in window||delete wr.transitionend.transition);var Cr=Er("animationend"),_r=Er("animationiteration"),xr=Er("animationstart"),Ir=Er("transitionend"),Pr=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Pr.set(e,t),u(t,[e])}for(var Lr=0;Lr<Tr.length;Lr++){var Dr=Tr[Lr];Nr(Dr.toLowerCase(),"on"+(Dr[0].toUpperCase()+Dr.slice(1)))}Nr(Cr,"onAnimationEnd"),Nr(_r,"onAnimationIteration"),Nr(xr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Ir,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(zr));function Mr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,o,u,s){if(Ue.apply(this,arguments),Fe){if(!Fe)throw Error(l(198));var c=Re;Fe=!1,Re=null,Ae||(Ae=!0,$e=c)}}(r,t,void 0,e),e.currentTarget=null}function Fr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var i=r.length-1;0<=i;i--){var o=r[i],u=o.instance,s=o.currentTarget;if(o=o.listener,u!==l&&a.isPropagationStopped())break e;Mr(a,o,s),l=u}else for(i=0;i<r.length;i++){if(u=(o=r[i]).instance,s=o.currentTarget,o=o.listener,u!==l&&a.isPropagationStopped())break e;Mr(a,o,s),l=u}}}if(Ae)throw e=$e,Ae=!1,$e=null,e}function Rr(e,t){var n=t[da];void 0===n&&(n=t[da]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function Ar(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function jr(e){if(!e[$r]){e[$r]=!0,i.forEach((function(t){"selectionchange"!==t&&(Or.has(t)||Ar(t,!1,e),Ar(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Ar("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Kt(t)){case 1:var a=Vt;break;case 4:a=Ht;break;default:a=Wt}n=a.bind(null,t,n,e),a=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Br(e,t,n,r,a){var l=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==o;){if(null===(i=ma(o)))return;if(5===(u=i.tag)||6===u){r=l=i;continue e}o=o.parentNode}}r=r.return}Le((function(){var r=l,a=ke(n),i=[];e:{var o=Pr.get(e);if(void 0!==o){var u=un,s=e;switch(e){case"keypress":if(0===Zt(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=hn;break;case"focusout":s="blur",u=hn;break;case"beforeblur":case"afterblur":u=hn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=dn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=In;break;case Cr:case _r:case xr:u=mn;break;case Ir:u=Pn;break;case"scroll":u=cn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=vn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=xn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==o?o+"Capture":null:o;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Vr(h,m,p))),f)break;h=h.return}0<c.length&&(o=new u(o,s,null,n,a),i.push({event:o,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!ma(s)&&!s[fa])&&(u||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ma(s):null)&&(s!==(f=Be(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=dn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=xn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?o:va(u),p=null==s?o:va(s),(o=new c(m,h+"leave",u,n,a)).target=f,o.relatedTarget=p,m=null,ma(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Wr(p))h++;for(p=0,m=d;m;m=Wr(m))p++;for(;0<h-p;)c=Wr(c),h--;for(;0<p-h;)d=Wr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Wr(c),d=Wr(d)}c=null}else c=null;null!==u&&Qr(i,o,u,c,!1),null!==s&&null!==f&&Qr(i,f,s,c,!0)}if("select"===(u=(o=r?va(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===u&&"file"===o.type)var g=Kn;else if(Bn(o))if(Gn)g=ar;else{g=nr;var v=tr}else(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(g=rr);switch(g&&(g=g(e,r))?Vn(i,g,n,a):(v&&v(e,o,r),"focusout"===e&&(v=o._wrapperState)&&v.controlled&&"number"===o.type&&ee(o,"number",o.value)),v=r?va(r):window,e){case"focusin":(Bn(v)||"true"===v.contentEditable)&&(hr=v,mr=r,gr=null);break;case"focusout":gr=mr=hr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,yr(i,n,a);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(i,n,a)}var y;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jn?An(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(jn||"onCompositionStart"!==b?"onCompositionEnd"===b&&jn&&(y=Jt()):(Yt="value"in(Gt=a)?Gt.value:Gt.textContent,jn=!0)),0<(v=Hr(r,b)).length&&(b=new yn(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=$n(n)))&&(b.data=y))),(y=On?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Rn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Rn?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Dn&&An(e,t)?(e=Jt(),Xt=Yt=Gt=null,jn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(a=new yn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Fr(i,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=De(e,n))&&r.unshift(Vr(e,l,a)),null!=(l=De(e,t))&&r.push(Vr(e,l,a))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,a){for(var l=t._reactName,i=[];null!==n&&n!==r;){var o=n,u=o.alternate,s=o.stateNode;if(null!==u&&u===r)break;5===o.tag&&null!==s&&(o=s,a?null!=(u=De(n,l))&&i.unshift(Vr(n,u,o)):a||null!=(u=De(n,l))&&i.push(Vr(n,u,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Kr,"")}function Yr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(l(425))}function Xr(){}var Jr=null;function Zr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ea="function"==typeof setTimeout?setTimeout:void 0,ta="function"==typeof clearTimeout?clearTimeout:void 0,na="function"==typeof Promise?Promise:void 0,ra="function"==typeof queueMicrotask?queueMicrotask:void 0!==na?function(e){return na.resolve(null).then(e).catch(aa)}:ea;function aa(e){setTimeout((function(){throw e}))}function la(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function ia(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function oa(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var ua=Math.random().toString(36).slice(2),sa="__reactFiber$"+ua,ca="__reactProps$"+ua,fa="__reactContainer$"+ua,da="__reactEvents$"+ua,pa="__reactListeners$"+ua,ha="__reactHandles$"+ua;function ma(e){var t=e[sa];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fa]||n[sa]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=oa(e);null!==e;){if(n=e[sa])return n;e=oa(e)}return t}n=(e=n).parentNode}return null}function ga(e){return!(e=e[sa]||e[fa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function va(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function ya(e){return e[ca]||null}var ba=[],wa=-1;function ka(e){return{current:e}}function Sa(e){0>wa||(e.current=ba[wa],ba[wa]=null,wa--)}function Ea(e,t){wa++,ba[wa]=e.current,e.current=t}var Ca={},_a=ka(Ca),xa=ka(!1),Ia=Ca;function Pa(e,t){var n=e.type.contextTypes;if(!n)return Ca;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in n)l[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function Ta(e){return null!=e.childContextTypes}function Na(){Sa(xa),Sa(_a)}function La(e,t,n){if(_a.current!==Ca)throw Error(l(168));Ea(_a,t),Ea(xa,n)}function Da(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(l(108,V(e)||"Unknown",a));return R({},n,r)}function za(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Ca,Ia=_a.current,Ea(_a,e),Ea(xa,xa.current),!0}function Oa(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=Da(e,t,Ia),r.__reactInternalMemoizedMergedChildContext=e,Sa(xa),Sa(_a),Ea(_a,e)):Sa(xa),Ea(xa,n)}var Ma=null,Fa=!1,Ra=!1;function Aa(e){null===Ma?Ma=[e]:Ma.push(e)}function $a(){if(!Ra&&null!==Ma){Ra=!0;var e=0,t=yt;try{var n=Ma;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ma=null,Fa=!1}catch(t){throw null!==Ma&&(Ma=Ma.slice(e+1)),qe(Ze,$a),t}finally{yt=t,Ra=!1}}return null}var ja=w.ReactCurrentBatchConfig;function Ua(e,t){if(e&&e.defaultProps){for(var n in t=R({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ba=ka(null),Va=null,Ha=null,Wa=null;function Qa(){Wa=Ha=Va=null}function qa(e){var t=Ba.current;Sa(Ba),e._currentValue=t}function Ka(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ga(e,t){Va=e,Wa=Ha=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(vo=!0),e.firstContext=null)}function Ya(e){var t=e._currentValue;if(Wa!==e)if(e={context:e,memoizedValue:t,next:null},null===Ha){if(null===Va)throw Error(l(308));Ha=e,Va.dependencies={lanes:0,firstContext:e}}else Ha=Ha.next=e;return t}var Xa=null,Ja=!1;function Za(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function el(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function tl(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function nl(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,null!==vu&&0!=(1&e.mode)&&0==(2&gu)?(null===(e=n.interleaved)?(t.next=t,null===Xa?Xa=[n]:Xa.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function rl(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function al(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?a=l=i:l=l.next=i,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ll(e,t,n,r){var a=e.updateQueue;Ja=!1;var l=a.firstBaseUpdate,i=a.lastBaseUpdate,o=a.shared.pending;if(null!==o){a.shared.pending=null;var u=o,s=u.next;u.next=null,null===i?l=s:i.next=s,i=u;var c=e.alternate;null!==c&&(o=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===o?c.firstBaseUpdate=s:o.next=s,c.lastBaseUpdate=u)}if(null!==l){var f=a.baseState;for(i=0,c=s=u=null,o=l;;){var d=o.lane,p=o.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,m=o;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=R({},f,d);break e;case 2:Ja=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[o]:d.push(o))}else p={eventTime:p,lane:d,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(o=o.next)){if(null===(o=a.shared.pending))break;o=(d=o).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===l&&(a.shared.lanes=0);Cu|=i,e.lanes=i,e.memoizedState=f}}function il(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var ol=(new r.Component).refs;function ul(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:R({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var sl={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Uu(),a=Bu(e),l=tl(r,a);l.payload=t,null!=n&&(l.callback=n),nl(e,l),null!==(t=Vu(e,a,r))&&rl(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Uu(),a=Bu(e),l=tl(r,a);l.tag=1,l.payload=t,null!=n&&(l.callback=n),nl(e,l),null!==(t=Vu(e,a,r))&&rl(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Uu(),r=Bu(e),a=tl(n,r);a.tag=2,null!=t&&(a.callback=t),nl(e,a),null!==(t=Vu(e,r,n))&&rl(t,e,r)}};function cl(e,t,n,r,a,l,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,i):!(t.prototype&&t.prototype.isPureReactComponent&&ir(n,r)&&ir(a,l))}function fl(e,t,n){var r=!1,a=Ca,l=t.contextType;return"object"==typeof l&&null!==l?l=Ya(l):(a=Ta(t)?Ia:_a.current,l=(r=null!=(r=t.contextTypes))?Pa(e,a):Ca),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=sl,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),t}function dl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&sl.enqueueReplaceState(t,t.state,null)}function pl(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=ol,Za(e);var l=t.contextType;"object"==typeof l&&null!==l?a.context=Ya(l):(l=Ta(t)?Ia:_a.current,a.context=Pa(e,l)),a.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(ul(e,t,l,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&sl.enqueueReplaceState(a,a.state,null),ll(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var hl=[],ml=0,gl=null,vl=0,yl=[],bl=0,wl=null,kl=1,Sl="";function El(e,t){hl[ml++]=vl,hl[ml++]=gl,gl=e,vl=t}function Cl(e,t,n){yl[bl++]=kl,yl[bl++]=Sl,yl[bl++]=wl,wl=e;var r=kl;e=Sl;var a=32-it(r)-1;r&=~(1<<a),n+=1;var l=32-it(t)+a;if(30<l){var i=a-a%5;l=(r&(1<<i)-1).toString(32),r>>=i,a-=i,kl=1<<32-it(t)+a|n<<a|r,Sl=l+e}else kl=1<<l|n<<a|r,Sl=e}function _l(e){null!==e.return&&(El(e,1),Cl(e,1,0))}function xl(e){for(;e===gl;)gl=hl[--ml],hl[ml]=null,vl=hl[--ml],hl[ml]=null;for(;e===wl;)wl=yl[--bl],yl[bl]=null,Sl=yl[--bl],yl[bl]=null,kl=yl[--bl],yl[bl]=null}var Il=null,Pl=null,Tl=!1,Nl=null;function Ll(e,t){var n=bs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Dl(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,Il=e,Pl=ia(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,Il=e,Pl=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==wl?{id:kl,overflow:Sl}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=bs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,Il=e,Pl=null,!0);default:return!1}}function zl(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Ol(e){if(Tl){var t=Pl;if(t){var n=t;if(!Dl(e,t)){if(zl(e))throw Error(l(418));t=ia(n.nextSibling);var r=Il;t&&Dl(e,t)?Ll(r,n):(e.flags=-4097&e.flags|2,Tl=!1,Il=e)}}else{if(zl(e))throw Error(l(418));e.flags=-4097&e.flags|2,Tl=!1,Il=e}}}function Ml(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Il=e}function Fl(e){if(e!==Il)return!1;if(!Tl)return Ml(e),Tl=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!Zr(e.type,e.memoizedProps)),t&&(t=Pl)){if(zl(e)){for(e=Pl;e;)e=ia(e.nextSibling);throw Error(l(418))}for(;t;)Ll(e,t),t=ia(t.nextSibling)}if(Ml(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Pl=ia(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Pl=null}}else Pl=Il?ia(e.stateNode.nextSibling):null;return!0}function Rl(){Pl=Il=null,Tl=!1}function Al(e){null===Nl?Nl=[e]:Nl.push(e)}function $l(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===ol&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function jl(e,t){throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ul(e){return(0,e._init)(e._payload)}function Bl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=ks(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=_s(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var l=n.type;return l===E?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===D&&Ul(l)===t.type)?((r=a(t,n.props)).ref=$l(e,t,n),r.return=e,r):((r=Ss(n.type,n.key,n.props,null,e.mode,r)).ref=$l(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=xs(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,l){return null===t||7!==t.tag?((t=Es(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=_s(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Ss(t.type,t.key,t.props,null,e.mode,n)).ref=$l(e,null,t),n.return=e,n;case S:return(t=xs(t,e.mode,n)).return=e,t;case D:return d(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Es(t,e.mode,n,null)).return=e,t;jl(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?s(e,t,n,r):null;case S:return n.key===a?c(e,t,n,r):null;case D:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||M(n))return null!==a?null:f(e,t,n,r,null);jl(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case D:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||M(r))return f(t,e=e.get(n)||null,r,a,null);jl(t,r)}return null}function m(a,l,o,u){for(var s=null,c=null,f=l,m=l=0,g=null;null!==f&&m<o.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(a,f,o[m],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(a,f),l=i(v,l,m),null===c?s=v:c.sibling=v,c=v,f=g}if(m===o.length)return n(a,f),Tl&&El(a,m),s;if(null===f){for(;m<o.length;m++)null!==(f=d(a,o[m],u))&&(l=i(f,l,m),null===c?s=f:c.sibling=f,c=f);return Tl&&El(a,m),s}for(f=r(a,f);m<o.length;m++)null!==(g=h(f,a,m,o[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),l=i(g,l,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(a,e)})),Tl&&El(a,m),s}function g(a,o,u,s){var c=M(u);if("function"!=typeof c)throw Error(l(150));if(null==(u=c.call(u)))throw Error(l(151));for(var f=c=null,m=o,g=o=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(a,m,y.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(a,m),o=i(b,o,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(a,m),Tl&&El(a,g),c;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=d(a,y.value,s))&&(o=i(y,o,g),null===f?c=y:f.sibling=y,f=y);return Tl&&El(a,g),c}for(m=r(a,m);!y.done;g++,y=u.next())null!==(y=h(m,a,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),o=i(y,o,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(a,e)})),Tl&&El(a,g),c}return function e(r,l,i,u){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var s=i.key,c=l;null!==c;){if(c.key===s){if((s=i.type)===E){if(7===c.tag){n(r,c.sibling),(l=a(c,i.props.children)).return=r,r=l;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===D&&Ul(s)===c.type){n(r,c.sibling),(l=a(c,i.props)).ref=$l(r,c,i),l.return=r,r=l;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===E?((l=Es(i.props.children,r.mode,u,i.key)).return=r,r=l):((u=Ss(i.type,i.key,i.props,null,r.mode,u)).ref=$l(r,l,i),u.return=r,r=u)}return o(r);case S:e:{for(c=i.key;null!==l;){if(l.key===c){if(4===l.tag&&l.stateNode.containerInfo===i.containerInfo&&l.stateNode.implementation===i.implementation){n(r,l.sibling),(l=a(l,i.children||[])).return=r,r=l;break e}n(r,l);break}t(r,l),l=l.sibling}(l=xs(i,r.mode,u)).return=r,r=l}return o(r);case D:return e(r,l,(c=i._init)(i._payload),u)}if(te(i))return m(r,l,i,u);if(M(i))return g(r,l,i,u);jl(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==l&&6===l.tag?(n(r,l.sibling),(l=a(l,i)).return=r,r=l):(n(r,l),(l=_s(i,r.mode,u)).return=r,r=l),o(r)):n(r,l)}}var Vl=Bl(!0),Hl=Bl(!1),Wl={},Ql=ka(Wl),ql=ka(Wl),Kl=ka(Wl);function Gl(e){if(e===Wl)throw Error(l(174));return e}function Yl(e,t){switch(Ea(Kl,t),Ea(ql,e),Ea(Ql,Wl),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Sa(Ql),Ea(Ql,t)}function Xl(){Sa(Ql),Sa(ql),Sa(Kl)}function Jl(e){Gl(Kl.current);var t=Gl(Ql.current),n=ue(t,e.type);t!==n&&(Ea(ql,e),Ea(Ql,n))}function Zl(e){ql.current===e&&(Sa(Ql),Sa(ql))}var ei=ka(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var ai=w.ReactCurrentDispatcher,li=w.ReactCurrentBatchConfig,ii=0,oi=null,ui=null,si=null,ci=!1,fi=!1,di=0,pi=0;function hi(){throw Error(l(321))}function mi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function gi(e,t,n,r,a,i){if(ii=i,oi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ai.current=null===e||null===e.memoizedState?Ji:Zi,e=n(r,a),fi){i=0;do{if(fi=!1,di=0,25<=i)throw Error(l(301));i+=1,si=ui=null,t.updateQueue=null,ai.current=eo,e=n(r,a)}while(fi)}if(ai.current=Xi,t=null!==ui&&null!==ui.next,ii=0,si=ui=oi=null,ci=!1,t)throw Error(l(300));return e}function vi(){var e=0!==di;return di=0,e}function yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===si?oi.memoizedState=si=e:si=si.next=e,si}function bi(){if(null===ui){var e=oi.alternate;e=null!==e?e.memoizedState:null}else e=ui.next;var t=null===si?oi.memoizedState:si.next;if(null!==t)si=t,ui=e;else{if(null===e)throw Error(l(310));e={memoizedState:(ui=e).memoizedState,baseState:ui.baseState,baseQueue:ui.baseQueue,queue:ui.queue,next:null},null===si?oi.memoizedState=si=e:si=si.next=e}return si}function wi(e,t){return"function"==typeof t?t(e):t}function ki(e){var t=bi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=ui,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=o=null,s=null,c=i;do{var f=c.lane;if((ii&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,o=r):s=s.next=d,oi.lanes|=f,Cu|=f}c=c.next}while(null!==c&&c!==i);null===s?o=r:s.next=u,lr(r,t.memoizedState)||(vo=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,oi.lanes|=i,Cu|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Si(e){var t=bi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{i=e(i,o.action),o=o.next}while(o!==a);lr(i,t.memoizedState)||(vo=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ei(){}function Ci(e,t){var n=oi,r=bi(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,vo=!0),r=r.queue,Mi(Ii.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==si&&1&si.memoizedState.tag){if(n.flags|=2048,Ni(9,xi.bind(null,n,r,a,t),void 0,null),null===vu)throw Error(l(349));0!=(30&ii)||_i(n,t,a)}return a}function _i(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=oi.updateQueue)?(t={lastEffect:null,stores:null},oi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function xi(e,t,n,r){t.value=n,t.getSnapshot=r,Pi(t)&&Vu(e,1,-1)}function Ii(e,t,n){return n((function(){Pi(t)&&Vu(e,1,-1)}))}function Pi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ti(e){var t=yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:wi,lastRenderedState:e},t.queue=e,e=e.dispatch=Qi.bind(null,oi,e),[t.memoizedState,e]}function Ni(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=oi.updateQueue)?(t={lastEffect:null,stores:null},oi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Li(){return bi().memoizedState}function Di(e,t,n,r){var a=yi();oi.flags|=e,a.memoizedState=Ni(1|t,n,void 0,void 0===r?null:r)}function zi(e,t,n,r){var a=bi();r=void 0===r?null:r;var l=void 0;if(null!==ui){var i=ui.memoizedState;if(l=i.destroy,null!==r&&mi(r,i.deps))return void(a.memoizedState=Ni(t,n,l,r))}oi.flags|=e,a.memoizedState=Ni(1|t,n,l,r)}function Oi(e,t){return Di(8390656,8,e,t)}function Mi(e,t){return zi(2048,8,e,t)}function Fi(e,t){return zi(4,2,e,t)}function Ri(e,t){return zi(4,4,e,t)}function Ai(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function $i(e,t,n){return n=null!=n?n.concat([e]):null,zi(4,4,Ai.bind(null,t,e),n)}function ji(){}function Ui(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Bi(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Vi(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=li.transition;li.transition={};try{e(!1),t()}finally{yt=n,li.transition=r}}function Hi(){return bi().memoizedState}function Wi(e,t,n){var r=Bu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},qi(e)?Ki(t,n):(Gi(e,t,n),null!==(e=Vu(e,r,n=Uu()))&&Yi(e,t,r))}function Qi(e,t,n){var r=Bu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(qi(e))Ki(t,a);else{Gi(e,t,a);var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var i=t.lastRenderedState,o=l(i,n);if(a.hasEagerState=!0,a.eagerState=o,lr(o,i))return}catch(e){}null!==(e=Vu(e,r,n=Uu()))&&Yi(e,t,r)}}function qi(e){var t=e.alternate;return e===oi||null!==t&&t===oi}function Ki(e,t){fi=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Gi(e,t,n){null!==vu&&0!=(1&e.mode)&&0==(2&gu)?(null===(e=t.interleaved)?(n.next=n,null===Xa?Xa=[t]:Xa.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function Yi(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Xi={readContext:Ya,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},Ji={readContext:Ya,useCallback:function(e,t){return yi().memoizedState=[e,void 0===t?null:t],e},useContext:Ya,useEffect:Oi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Di(4194308,4,Ai.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Di(4194308,4,e,t)},useInsertionEffect:function(e,t){return Di(4,2,e,t)},useMemo:function(e,t){var n=yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Wi.bind(null,oi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yi().memoizedState=e},useState:Ti,useDebugValue:ji,useDeferredValue:function(e){var t=Ti(e),n=t[0],r=t[1];return Oi((function(){var t=li.transition;li.transition={};try{r(e)}finally{li.transition=t}}),[e]),n},useTransition:function(){var e=Ti(!1),t=e[0];return e=Vi.bind(null,e[1]),yi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=oi,a=yi();if(Tl){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===vu)throw Error(l(349));0!=(30&ii)||_i(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Oi(Ii.bind(null,r,i,e),[e]),r.flags|=2048,Ni(9,xi.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=yi(),t=vu.identifierPrefix;if(Tl){var n=Sl;t=":"+t+"R"+(n=(kl&~(1<<32-it(kl)-1)).toString(32)+n),0<(n=di++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Zi={readContext:Ya,useCallback:Ui,useContext:Ya,useEffect:Mi,useImperativeHandle:$i,useInsertionEffect:Fi,useLayoutEffect:Ri,useMemo:Bi,useReducer:ki,useRef:Li,useState:function(){return ki(wi)},useDebugValue:ji,useDeferredValue:function(e){var t=ki(wi),n=t[0],r=t[1];return Mi((function(){var t=li.transition;li.transition={};try{r(e)}finally{li.transition=t}}),[e]),n},useTransition:function(){return[ki(wi)[0],bi().memoizedState]},useMutableSource:Ei,useSyncExternalStore:Ci,useId:Hi,unstable_isNewReconciler:!1},eo={readContext:Ya,useCallback:Ui,useContext:Ya,useEffect:Mi,useImperativeHandle:$i,useInsertionEffect:Fi,useLayoutEffect:Ri,useMemo:Bi,useReducer:Si,useRef:Li,useState:function(){return Si(wi)},useDebugValue:ji,useDeferredValue:function(e){var t=Si(wi),n=t[0],r=t[1];return Mi((function(){var t=li.transition;li.transition={};try{r(e)}finally{li.transition=t}}),[e]),n},useTransition:function(){return[Si(wi)[0],bi().memoizedState]},useMutableSource:Ei,useSyncExternalStore:Ci,useId:Hi,unstable_isNewReconciler:!1};function to(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function no(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ro,ao,lo,io="function"==typeof WeakMap?WeakMap:Map;function oo(e,t,n){(n=tl(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Lu||(Lu=!0,Du=r),no(0,t)},n}function uo(e,t,n){(n=tl(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){no(0,t)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){no(0,t),"function"!=typeof r&&(null===zu?zu=new Set([this]):zu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function so(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new io;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=ps.bind(null,e,t,n),t.then(e,e))}function co(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function fo(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=tl(-1,1)).tag=2,nl(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function po(e,t){if(!Tl)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ho(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function mo(e,t,n){var r=t.pendingProps;switch(xl(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ho(t),null;case 1:case 17:return Ta(t.type)&&Na(),ho(t),null;case 3:return r=t.stateNode,Xl(),Sa(xa),Sa(_a),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Fl(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Nl&&(Ku(Nl),Nl=null))),ho(t),null;case 5:Zl(t);var a=Gl(Kl.current);if(n=t.type,null!==e&&null!=t.stateNode)ao(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(l(166));return ho(t),null}if(e=Gl(Ql.current),Fl(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[sa]=t,r[ca]=i,e=0!=(1&t.mode),n){case"dialog":Rr("cancel",r),Rr("close",r);break;case"iframe":case"object":case"embed":Rr("load",r);break;case"video":case"audio":for(a=0;a<zr.length;a++)Rr(zr[a],r);break;case"source":Rr("error",r);break;case"img":case"image":case"link":Rr("error",r),Rr("load",r);break;case"details":Rr("toggle",r);break;case"input":Y(r,i),Rr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Rr("invalid",r);break;case"textarea":ae(r,i),Rr("invalid",r)}for(var u in ye(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(Yr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(Yr(r.textContent,s,e),a=["children",""+s]):o.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Rr("scroll",r)}switch(n){case"input":Q(r),Z(r,i,!0);break;case"textarea":Q(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Xr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[sa]=t,e[ca]=r,ro(e,t),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Rr("cancel",e),Rr("close",e),a=r;break;case"iframe":case"object":case"embed":Rr("load",e),a=r;break;case"video":case"audio":for(a=0;a<zr.length;a++)Rr(zr[a],e);a=r;break;case"source":Rr("error",e),a=r;break;case"img":case"image":case"link":Rr("error",e),Rr("load",e),a=r;break;case"details":Rr("toggle",e),a=r;break;case"input":Y(e,r),a=G(e,r),Rr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=R({},r,{value:void 0}),Rr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Rr("invalid",e)}for(i in ye(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(o.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Rr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":Q(e),Z(e,r,!1);break;case"textarea":Q(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ho(t),null;case 6:if(e&&null!=t.stateNode)lo(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(n=Gl(Kl.current),Gl(Ql.current),Fl(t)){if(r=t.stateNode,n=t.memoizedProps,r[sa]=t,(i=r.nodeValue!==n)&&null!==(e=Il))switch(u=0!=(1&e.mode),e.tag){case 3:Yr(r.nodeValue,n,u);break;case 5:!0!==e.memoizedProps[void 0]&&Yr(r.nodeValue,n,u)}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[sa]=t,t.stateNode=r}return ho(t),null;case 13:if(Sa(ei),r=t.memoizedState,Tl&&null!==Pl&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Pl;r;)r=ia(r.nextSibling);return Rl(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Fl(t),null===e){if(!r)throw Error(l(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(l(317));r[sa]=t}else Rl(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return ho(t),null}return null!==Nl&&(Ku(Nl),Nl=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Fl(t):n=null!==e.memoizedState,r&&!n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ei.current)?0===Su&&(Su=3):rs())),null!==t.updateQueue&&(t.flags|=4),ho(t),null);case 4:return Xl(),null===e&&jr(t.stateNode.containerInfo),ho(t),null;case 10:return qa(t.type._context),ho(t),null;case 19:if(Sa(ei),null===(i=t.memoizedState))return ho(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)po(i,!1);else{if(0!==Su||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ti(e))){for(t.flags|=128,po(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ea(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Nu&&(t.flags|=128,r=!0,po(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),po(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!Tl)return ho(t),null}else 2*Xe()-i.renderingStartTime>Nu&&1073741824!==n&&(t.flags|=128,r=!0,po(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ei.current,Ea(ei,r?1&n|2:1&n),t):(ho(t),null);case 22:case 23:return Zu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&wu)&&(ho(t),6&t.subtreeFlags&&(t.flags|=8192)):ho(t),null;case 24:case 25:return null}throw Error(l(156,t.tag))}ro=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ao=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Gl(Ql.current);var l,i=null;switch(n){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=R({},a,{value:void 0}),r=R({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in ye(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(l in u)u.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(o.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(l in u)!u.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&u[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(o.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Rr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},lo=function(e,t,n,r){n!==r&&(t.flags|=4)};var go=w.ReactCurrentOwner,vo=!1;function yo(e,t,n,r){t.child=null===e?Hl(t,null,n,r):Vl(t,e.child,n,r)}function bo(e,t,n,r,a){n=n.render;var l=t.ref;return Ga(t,a),r=gi(e,t,n,r,l,a),n=vi(),null===e||vo?(Tl&&n&&_l(t),t.flags|=1,yo(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$o(e,t,a))}function wo(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||ws(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ss(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,ko(e,t,l,r,a))}if(l=e.child,0==(e.lanes&a)){var i=l.memoizedProps;if((n=null!==(n=n.compare)?n:ir)(i,r)&&e.ref===t.ref)return $o(e,t,a)}return t.flags|=1,(e=ks(l,r)).ref=t.ref,e.return=t,t.child=e}function ko(e,t,n,r,a){if(null!==e&&ir(e.memoizedProps,r)&&e.ref===t.ref){if(vo=!1,0==(e.lanes&a))return t.lanes=e.lanes,$o(e,t,a);0!=(131072&e.flags)&&(vo=!0)}return Co(e,t,n,r,a)}function So(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null},Ea(ku,wu),wu|=n;else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null},t.updateQueue=null,Ea(ku,wu),wu|=e,null;t.memoizedState={baseLanes:0,cachePool:null},r=null!==l?l.baseLanes:n,Ea(ku,wu),wu|=r}else null!==l?(r=l.baseLanes|n,t.memoizedState=null):r=n,Ea(ku,wu),wu|=r;return yo(e,t,a,n),t.child}function Eo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Co(e,t,n,r,a){var l=Ta(n)?Ia:_a.current;return l=Pa(t,l),Ga(t,a),n=gi(e,t,n,r,l,a),r=vi(),null===e||vo?(Tl&&r&&_l(t),t.flags|=1,yo(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,$o(e,t,a))}function _o(e,t,n,r,a){if(Ta(n)){var l=!0;za(t)}else l=!1;if(Ga(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),fl(t,n,r),pl(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Ya(s):Pa(t,s=Ta(n)?Ia:_a.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==r||u!==s)&&dl(t,i,r,s),Ja=!1;var d=t.memoizedState;i.state=d,ll(t,r,i,a),u=t.memoizedState,o!==r||d!==u||xa.current||Ja?("function"==typeof c&&(ul(t,n,c,r),u=t.memoizedState),(o=Ja||cl(t,n,o,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=o):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,el(e,t),o=t.memoizedProps,s=t.type===t.elementType?o:Ua(t.type,o),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Ya(u):Pa(t,u=Ta(n)?Ia:_a.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==f||d!==u)&&dl(t,i,r,u),Ja=!1,d=t.memoizedState,i.state=d,ll(t,r,i,a);var h=t.memoizedState;o!==f||d!==h||xa.current||Ja?("function"==typeof p&&(ul(t,n,p,r),h=t.memoizedState),(s=Ja||cl(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return xo(e,t,n,r,l,a)}function xo(e,t,n,r,a,l){Eo(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Oa(t,n,!1),$o(e,t,l);r=t.stateNode,go.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Vl(t,e.child,null,l),t.child=Vl(t,null,o,l)):yo(e,t,o,l),t.memoizedState=r.state,a&&Oa(t,n,!0),t.child}function Io(e){var t=e.stateNode;t.pendingContext?La(0,t.pendingContext,t.pendingContext!==t.context):t.context&&La(0,t.context,!1),Yl(e,t.containerInfo)}function Po(e,t,n,r,a){return Rl(),Al(a),t.flags|=256,yo(e,t,n,r),t.child}var To={dehydrated:null,treeContext:null,retryLane:0};function No(e){return{baseLanes:e,cachePool:null}}function Lo(e,t,n){var r,a=t.pendingProps,i=ei.current,o=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ea(ei,1&i),null===e)return Ol(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,o?(a=t.mode,o=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==o?(o.childLanes=0,o.pendingProps=i):o=Cs(i,a,0,null),e=Es(e,a,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=No(n),t.memoizedState=To,e):Do(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,Mo(e,t,n,Error(l(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=a.fallback,i=t.mode,a=Cs({mode:"visible",children:a.children},i,0,null),(o=Es(o,i,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,0!=(1&t.mode)&&Vl(t,e.child,null,n),t.child.memoizedState=No(n),t.memoizedState=To,o);if(0==(1&t.mode))t=Mo(e,t,n,null);else if("$!"===r.data)t=Mo(e,t,n,Error(l(419)));else if(a=0!=(n&e.childLanes),vo||a){if(null!==(a=vu)){switch(n&-n){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(a=0!=(o&(a.suspendedLanes|n))?0:o)&&a!==i.retryLane&&(i.retryLane=a,Vu(e,a,-1))}rs(),t=Mo(e,t,n,Error(l(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=ms.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,Pl=ia(r.nextSibling),Il=t,Tl=!0,Nl=null,null!==n&&(yl[bl++]=kl,yl[bl++]=Sl,yl[bl++]=wl,kl=n.id,Sl=n.overflow,wl=t),(t=Do(t,t.pendingProps.children)).flags|=4096);return t}return o?(a=Oo(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?No(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=To,a):(n=zo(e,t,a.children,n),t.memoizedState=null,n)}return o?(a=Oo(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?No(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=To,a):(n=zo(e,t,a.children,n),t.memoizedState=null,n)}function Do(e,t){return(t=Cs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zo(e,t,n,r){var a=e.child;return e=a.sibling,n=ks(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Oo(e,t,n,r,a){var l=t.mode,i=(e=e.child).sibling,o={mode:"hidden",children:n};return 0==(1&l)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=o,t.deletions=null):(n=ks(e,o)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=ks(i,r):(r=Es(r,l,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Mo(e,t,n,r){return null!==r&&Al(r),Vl(t,e.child,null,n),(e=Do(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fo(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ka(e.return,t,n)}function Ro(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function Ao(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(yo(e,t,r.children,n),0!=(2&(r=ei.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fo(e,n,t);else if(19===e.tag)Fo(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ea(ei,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ro(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ti(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ro(t,!0,n,null,l);break;case"together":Ro(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function $o(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Cu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=ks(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ks(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function jo(e,t){switch(xl(t),t.tag){case 1:return Ta(t.type)&&Na(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xl(),Sa(xa),Sa(_a),ri(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zl(t),null;case 13:if(Sa(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));Rl()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Sa(ei),null;case 4:return Xl(),null;case 10:return qa(t.type._context),null;case 22:case 23:return Zu(),null;default:return null}}var Uo=!1,Bo=!1,Vo="function"==typeof WeakSet?WeakSet:Set,Ho=null;function Wo(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ds(e,t,n)}else n.current=null}function Qo(e,t,n){try{n()}catch(n){ds(e,t,n)}}var qo=!1;function Ko(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var l=a.destroy;a.destroy=void 0,void 0!==l&&Qo(t,n,l)}a=a.next}while(a!==r)}}function Go(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Yo(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function Xo(e,t,n){if(lt&&"function"==typeof lt.onCommitFiberUnmount)try{lt.onCommitFiberUnmount(at,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var a=r,l=a.destroy;a=a.tag,void 0!==l&&(0!=(2&a)||0!=(4&a))&&Qo(t,n,l),r=r.next}while(r!==e)}break;case 1:if(Wo(t,n),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ds(t,n,e)}break;case 5:Wo(t,n);break;case 4:au(e,t,n)}}function Jo(e){var t=e.alternate;null!==t&&(e.alternate=null,Jo(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[sa],delete t[ca],delete t[da],delete t[pa],delete t[ha]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Zo(e){return 5===e.tag||3===e.tag||4===e.tag}function eu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Zo(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function tu(e){e:{for(var t=e.return;null!==t;){if(Zo(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(n.tag){case 5:t=n.stateNode,32&n.flags&&(de(t,""),n.flags&=-33),ru(e,n=eu(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,nu(e,n=eu(e),t);break;default:throw Error(l(161))}}function nu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(nu(e,t,n),e=e.sibling;null!==e;)nu(e,t,n),e=e.sibling}function ru(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ru(e,t,n),e=e.sibling;null!==e;)ru(e,t,n),e=e.sibling}function au(e,t,n){for(var r,a,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(l(160));switch(r=o.stateNode,o.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var u=e,s=i,c=n,f=s;;)if(Xo(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}a?(u=r,s=i.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(i.stateNode)}else if(18===i.tag)a?(u=r,s=i.stateNode,8===u.nodeType?la(u.parentNode,s):1===u.nodeType&&la(u,s),Ut(u)):la(r,i.stateNode);else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,a=!0,i.child.return=i,i=i.child;continue}}else if(Xo(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function lu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:return Ko(3,t,t.return),Go(3,t),void Ko(5,t,t.return);case 1:case 12:case 17:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for("input"===e&&"radio"===r.type&&null!=r.name&&X(n,r),be(e,a),t=be(e,r),a=0;a<i.length;a+=2){var o=i[a],u=i[a+1];"style"===o?ge(n,u):"dangerouslySetInnerHTML"===o?fe(n,u):"children"===o?de(n,u):b(n,o,u,t)}switch(e){case"input":J(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ne(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ne(n,!!r.multiple,r.defaultValue,!0):ne(n,!!r.multiple,r.multiple?[]:"",!1))}n[ca]=r}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void(null!==e&&e.memoizedState.isDehydrated&&Ut(t.stateNode.containerInfo));case 13:case 19:return void function(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Vo),t.forEach((function(t){var r=gs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}(t)}throw Error(l(163))}function iu(e,t,n){Ho=e,ou(e,t,n)}function ou(e,t,n){for(var r=0!=(1&e.mode);null!==Ho;){var a=Ho,l=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Uo;if(!i){var o=a.alternate,u=null!==o&&null!==o.memoizedState||Bo;o=Uo;var s=Bo;if(Uo=i,(Bo=u)&&!s)for(Ho=a;null!==Ho;)u=(i=Ho).child,22===i.tag&&null!==i.memoizedState?cu(a):null!==u?(u.return=i,Ho=u):cu(a);for(;null!==l;)Ho=l,ou(l,t,n),l=l.sibling;Ho=a,Uo=o,Bo=s}uu(e)}else 0!=(8772&a.subtreeFlags)&&null!==l?(l.return=a,Ho=l):uu(e)}}function uu(e){for(;null!==Ho;){var t=Ho;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Bo||Go(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Bo)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Ua(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&il(t,i,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}il(t,o,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(l(163))}Bo||512&t.flags&&Yo(t)}catch(e){ds(t,t.return,e)}}if(t===e){Ho=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ho=n;break}Ho=t.return}}function su(e){for(;null!==Ho;){var t=Ho;if(t===e){Ho=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ho=n;break}Ho=t.return}}function cu(e){for(;null!==Ho;){var t=Ho;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Go(4,t)}catch(e){ds(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){ds(t,a,e)}}var l=t.return;try{Yo(t)}catch(e){ds(t,l,e)}break;case 5:var i=t.return;try{Yo(t)}catch(e){ds(t,i,e)}}}catch(e){ds(t,t.return,e)}if(t===e){Ho=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Ho=o;break}Ho=t.return}}var fu,du=Math.ceil,pu=w.ReactCurrentDispatcher,hu=w.ReactCurrentOwner,mu=w.ReactCurrentBatchConfig,gu=0,vu=null,yu=null,bu=0,wu=0,ku=ka(0),Su=0,Eu=null,Cu=0,_u=0,xu=0,Iu=null,Pu=null,Tu=0,Nu=1/0,Lu=!1,Du=null,zu=null,Ou=!1,Mu=null,Fu=0,Ru=0,Au=null,$u=-1,ju=0;function Uu(){return 0!=(6&gu)?Xe():-1!==$u?$u:$u=Xe()}function Bu(e){return 0==(1&e.mode)?1:0!=(2&gu)&&0!==bu?bu&-bu:null!==ja.transition?(0===ju&&(e=st,0==(4194240&(st<<=1))&&(st=64),ju=e),ju):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function Vu(e,t,n){if(50<Ru)throw Ru=0,Au=null,Error(l(185));var r=Hu(e,t);return null===r?null:(gt(r,t,n),0!=(2&gu)&&r===vu||(r===vu&&(0==(2&gu)&&(_u|=t),4===Su&&Gu(r,bu)),Wu(r,n),1===t&&0===gu&&0==(1&e.mode)&&(Nu=Xe()+500,Fa&&$a())),r)}function Hu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Wu(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var i=31-it(l),o=1<<i,u=a[i];-1===u?0!=(o&n)&&0==(o&r)||(a[i]=pt(o,t)):u<=t&&(e.expiredLanes|=o),l&=~o}}(e,t);var r=dt(e,e===vu?bu:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Fa=!0,Aa(e)}(Yu.bind(null,e)):Aa(Yu.bind(null,e)),ra((function(){0===gu&&$a()})),n=null;else{switch(bt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=vs(n,Qu.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Qu(e,t){if($u=-1,ju=0,0!=(6&gu))throw Error(l(327));var n=e.callbackNode;if(cs()&&e.callbackNode!==n)return null;var r=dt(e,e===vu?bu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=as(e,r);else{t=r;var a=gu;gu|=2;var i=ns();for(vu===e&&bu===t||(Nu=Xe()+500,es(e,t));;)try{is();break}catch(t){ts(e,t)}Qa(),pu.current=i,gu=a,null!==yu?t=0:(vu=null,bu=0,t=Su)}if(0!==t){if(2===t&&0!==(a=ht(e))&&(r=a,t=qu(e,a)),1===t)throw n=Eu,es(e,0),Gu(e,r),Wu(e,Xe()),n;if(6===t)Gu(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!lr(l(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=as(e,r))&&0!==(i=ht(e))&&(r=i,t=qu(e,i)),1===t))throw n=Eu,es(e,0),Gu(e,r),Wu(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(l(345));case 2:case 5:ss(e,Pu);break;case 3:if(Gu(e,r),(130023424&r)===r&&10<(t=Tu+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Uu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ea(ss.bind(null,e,Pu),t);break}ss(e,Pu);break;case 4:if(Gu(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var o=31-it(r);i=1<<o,(o=t[o])>a&&(a=o),r&=~i}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*du(r/1960))-r)){e.timeoutHandle=ea(ss.bind(null,e,Pu),r);break}ss(e,Pu);break;default:throw Error(l(329))}}}return Wu(e,Xe()),e.callbackNode===n?Qu.bind(null,e):null}function qu(e,t){var n=Iu;return e.current.memoizedState.isDehydrated&&(es(e,t).flags|=256),2!==(e=as(e,t))&&(t=Pu,Pu=n,null!==t&&Ku(t)),e}function Ku(e){null===Pu?Pu=e:Pu.push.apply(Pu,e)}function Gu(e,t){for(t&=~xu,t&=~_u,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function Yu(e){if(0!=(6&gu))throw Error(l(327));cs();var t=dt(e,0);if(0==(1&t))return Wu(e,Xe()),null;var n=as(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=qu(e,r))}if(1===n)throw n=Eu,es(e,0),Gu(e,t),Wu(e,Xe()),n;if(6===n)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ss(e,Pu),Wu(e,Xe()),null}function Xu(e,t){var n=gu;gu|=1;try{return e(t)}finally{0===(gu=n)&&(Nu=Xe()+500,Fa&&$a())}}function Ju(e){null!==Mu&&0===Mu.tag&&0==(6&gu)&&cs();var t=gu;gu|=1;var n=mu.transition,r=yt;try{if(mu.transition=null,yt=1,e)return e()}finally{yt=r,mu.transition=n,0==(6&(gu=t))&&$a()}}function Zu(){wu=ku.current,Sa(ku)}function es(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ta(n)),null!==yu)for(n=yu.return;null!==n;){var r=n;switch(xl(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Na();break;case 3:Xl(),Sa(xa),Sa(_a),ri();break;case 5:Zl(r);break;case 4:Xl();break;case 13:case 19:Sa(ei);break;case 10:qa(r.type._context);break;case 22:case 23:Zu()}n=n.return}if(vu=e,yu=e=ks(e.current,null),bu=wu=t,Su=0,Eu=null,xu=_u=Cu=0,Pu=Iu=null,null!==Xa){for(t=0;t<Xa.length;t++)if(null!==(r=(n=Xa[t]).interleaved)){n.interleaved=null;var a=r.next,l=n.pending;if(null!==l){var i=l.next;l.next=a,r.next=i}n.pending=r}Xa=null}return e}function ts(e,t){for(;;){var n=yu;try{if(Qa(),ai.current=Xi,ci){for(var r=oi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ci=!1}if(ii=0,si=ui=oi=null,fi=!1,di=0,hu.current=null,null===n||null===n.return){Su=1,Eu=t,yu=null;break}e:{var i=e,o=n.return,u=n,s=t;if(t=bu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=co(o);if(null!==h){h.flags&=-257,fo(h,o,u,0,t),1&h.mode&&so(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(s),t.updateQueue=g}else m.add(s);break e}if(0==(1&t)){so(i,c,t),rs();break e}s=Error(l(426))}else if(Tl&&1&u.mode){var v=co(o);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),fo(v,o,u,0,t),Al(s);break e}}i=s,4!==Su&&(Su=2),null===Iu?Iu=[i]:Iu.push(i),s=to(s,u),u=o;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,al(u,oo(0,s,t));break e;case 1:i=s;var y=u.type,b=u.stateNode;if(0==(128&u.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===zu||!zu.has(b)))){u.flags|=65536,t&=-t,u.lanes|=t,al(u,uo(u,i,t));break e}}u=u.return}while(null!==u)}us(n)}catch(e){t=e,yu===n&&null!==n&&(yu=n=n.return);continue}break}}function ns(){var e=pu.current;return pu.current=Xi,null===e?Xi:e}function rs(){0!==Su&&3!==Su&&2!==Su||(Su=4),null===vu||0==(268435455&Cu)&&0==(268435455&_u)||Gu(vu,bu)}function as(e,t){var n=gu;gu|=2;var r=ns();for(vu===e&&bu===t||es(e,t);;)try{ls();break}catch(t){ts(e,t)}if(Qa(),gu=n,pu.current=r,null!==yu)throw Error(l(261));return vu=null,bu=0,Su}function ls(){for(;null!==yu;)os(yu)}function is(){for(;null!==yu&&!Ge();)os(yu)}function os(e){var t=fu(e.alternate,e,wu);e.memoizedProps=e.pendingProps,null===t?us(e):yu=t,hu.current=null}function us(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=mo(n,t,wu)))return void(yu=n)}else{if(null!==(n=jo(n,t)))return n.flags&=32767,void(yu=n);if(null===e)return Su=6,void(yu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(yu=t);yu=t=e}while(null!==t);0===Su&&(Su=5)}function ss(e,t){var n=yt,r=mu.transition;try{mu.transition=null,yt=1,function(e,t,n){do{cs()}while(null!==Mu);if(0!=(6&gu))throw Error(l(327));var r=e.finishedWork,a=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),l=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~l}}(e,i),e===vu&&(yu=vu=null,bu=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ou||(Ou=!0,vs(tt,(function(){return cs(),null}))),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=mu.transition,mu.transition=null;var o=yt;yt=1;var u=gu;gu|=4,hu.current=null,function(e,t){if(fr(e=cr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var o=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=o+a),d!==i||0!==r&&3!==d.nodeType||(s=o+r),3===d.nodeType&&(o+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=o),p===i&&++f===r&&(s=o),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Jr={focusedElem:e,selectionRange:n},Ho=t;null!==Ho;)if(e=(t=Ho).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Ho=e;else for(;null!==Ho;){t=Ho;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:Ua(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;if(1===w.nodeType)w.textContent="";else if(9===w.nodeType){var k=w.body;null!=k&&(k.textContent="")}break;default:throw Error(l(163))}}catch(e){ds(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ho=e;break}Ho=t.return}m=qo,qo=!1}(e,r),function(e,t){for(Ho=t;null!==Ho;){var n=(t=Ho).deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{au(e,a,t);var l=a.alternate;null!==l&&(l.return=null),a.return=null}catch(e){ds(a,t,e)}}if(n=t.child,0!=(12854&t.subtreeFlags)&&null!==n)n.return=t,Ho=n;else for(;null!==Ho;){t=Ho;try{var i=t.flags;if(32&i&&de(t.stateNode,""),512&i){var o=t.alternate;if(null!==o){var u=o.ref;null!==u&&("function"==typeof u?u(null):u.current=null)}}if(8192&i)switch(t.tag){case 13:if(null!==t.memoizedState){var s=t.alternate;null!==s&&null!==s.memoizedState||(Tu=Xe())}break;case 22:var c=null!==t.memoizedState,f=t.alternate,d=null!==f&&null!==f.memoizedState;e:{a=c;for(var p=null,h=r=n=t;;){if(5===h.tag){if(null===p){p=h;var m=h.stateNode;if(a){var g=m.style;"function"==typeof g.setProperty?g.setProperty("display","none","important"):g.display="none"}else{var v=h.stateNode,y=h.memoizedProps.style,b=null!=y&&y.hasOwnProperty("display")?y.display:null;v.style.display=me("display",b)}}}else if(6===h.tag)null===p&&(h.stateNode.nodeValue=a?"":h.memoizedProps);else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===r)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===r)break;for(;null===h.sibling;){if(null===h.return||h.return===r)break e;p===h&&(p=null),h=h.return}p===h&&(p=null),h.sibling.return=h.return,h=h.sibling}}if(c&&!d&&0!=(1&n.mode)){Ho=n;for(var w=n.child;null!==w;){for(n=Ho=w;null!==Ho;){var k=(r=Ho).child;switch(r.tag){case 0:case 11:case 14:case 15:Ko(4,r,r.return);break;case 1:Wo(r,r.return);var S=r.stateNode;if("function"==typeof S.componentWillUnmount){var E=r.return;try{S.props=r.memoizedProps,S.state=r.memoizedState,S.componentWillUnmount()}catch(e){ds(r,E,e)}}break;case 5:Wo(r,r.return);break;case 22:if(null!==r.memoizedState){su(n);continue}}null!==k?(k.return=r,Ho=k):su(n)}w=w.sibling}}}switch(4102&i){case 2:tu(t),t.flags&=-3;break;case 6:tu(t),t.flags&=-3,lu(t.alternate,t);break;case 4096:t.flags&=-4097;break;case 4100:t.flags&=-4097,lu(t.alternate,t);break;case 4:lu(t.alternate,t)}}catch(e){ds(t,t.return,e)}if(null!==(n=t.sibling)){n.return=t.return,Ho=n;break}Ho=t.return}}}(e,r),dr(Jr),Jr=null,e.current=r,iu(r,e,a),Ye(),gu=u,yt=o,mu.transition=i}else e.current=r;if(Ou&&(Ou=!1,Mu=e,Fu=a),0===(i=e.pendingLanes)&&(zu=null),function(e){if(lt&&"function"==typeof lt.onCommitFiberRoot)try{lt.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),Wu(e,Xe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n(t[r]);if(Lu)throw Lu=!1,e=Du,Du=null,e;0!=(1&Fu)&&0!==e.tag&&cs(),0!=(1&(i=e.pendingLanes))?e===Au?Ru++:(Ru=0,Au=e):Ru=0,$a()}(e,t,n)}finally{mu.transition=r,yt=n}return null}function cs(){if(null!==Mu){var e=bt(Fu),t=mu.transition,n=yt;try{if(mu.transition=null,yt=16>e?16:e,null===Mu)var r=!1;else{if(e=Mu,Mu=null,Fu=0,0!=(6&gu))throw Error(l(331));var a=gu;for(gu|=4,Ho=e.current;null!==Ho;){var i=Ho,o=i.child;if(0!=(16&Ho.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Ho=c;null!==Ho;){var f=Ho;switch(f.tag){case 0:case 11:case 15:Ko(8,f,i)}var d=f.child;if(null!==d)d.return=f,Ho=d;else for(;null!==Ho;){var p=(f=Ho).sibling,h=f.return;if(Jo(f),f===c){Ho=null;break}if(null!==p){p.return=h,Ho=p;break}Ho=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Ho=i}}if(0!=(2064&i.subtreeFlags)&&null!==o)o.return=i,Ho=o;else e:for(;null!==Ho;){if(0!=(2048&(i=Ho).flags))switch(i.tag){case 0:case 11:case 15:Ko(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Ho=y;break e}Ho=i.return}}var b=e.current;for(Ho=b;null!==Ho;){var w=(o=Ho).child;if(0!=(2064&o.subtreeFlags)&&null!==w)w.return=o,Ho=w;else e:for(o=b;null!==Ho;){if(0!=(2048&(u=Ho).flags))try{switch(u.tag){case 0:case 11:case 15:Go(9,u)}}catch(e){ds(u,u.return,e)}if(u===o){Ho=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Ho=k;break e}Ho=u.return}}if(gu=a,$a(),lt&&"function"==typeof lt.onPostCommitFiberRoot)try{lt.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{yt=n,mu.transition=t}}return!1}function fs(e,t,n){nl(e,t=oo(0,t=to(n,t),1)),t=Uu(),null!==(e=Hu(e,1))&&(gt(e,1,t),Wu(e,t))}function ds(e,t,n){if(3===e.tag)fs(e,e,n);else for(;null!==t;){if(3===t.tag){fs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zu||!zu.has(r))){nl(t,e=uo(t,e=to(n,e),1)),e=Uu(),null!==(t=Hu(t,1))&&(gt(t,1,e),Wu(t,e));break}}t=t.return}}function ps(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Uu(),e.pingedLanes|=e.suspendedLanes&n,vu===e&&(bu&n)===n&&(4===Su||3===Su&&(130023424&bu)===bu&&500>Xe()-Tu?es(e,0):xu|=n),Wu(e,t)}function hs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Uu();null!==(e=Hu(e,t))&&(gt(e,t,n),Wu(e,n))}function ms(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),hs(e,n)}function gs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(t),hs(e,n)}function vs(e,t){return qe(e,t)}function ys(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function bs(e,t,n,r){return new ys(e,t,n,r)}function ws(e){return!(!(e=e.prototype)||!e.isReactComponent)}function ks(e,t){var n=e.alternate;return null===n?((n=bs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ss(e,t,n,r,a,i){var o=2;if(r=e,"function"==typeof e)ws(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case E:return Es(n.children,a,i,t);case C:o=8,a|=8;break;case _:return(e=bs(12,n,t,2|a)).elementType=_,e.lanes=i,e;case T:return(e=bs(13,n,t,a)).elementType=T,e.lanes=i,e;case N:return(e=bs(19,n,t,a)).elementType=N,e.lanes=i,e;case z:return Cs(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:o=10;break e;case I:o=9;break e;case P:o=11;break e;case L:o=14;break e;case D:o=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=bs(o,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Es(e,t,n,r){return(e=bs(7,e,r,t)).lanes=n,e}function Cs(e,t,n,r){return(e=bs(22,e,r,t)).elementType=z,e.lanes=n,e.stateNode={},e}function _s(e,t,n){return(e=bs(6,e,null,t)).lanes=n,e}function xs(e,t,n){return(t=bs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Ps(e,t,n,r,a,l,i,o,u){return e=new Is(e,t,n,o,u),1===t?(t=1,!0===l&&(t|=8)):t=0,l=bs(3,null,null,t),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null},Za(l),e}function Ts(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ns(e){if(!e)return Ca;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ta(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(l(171))}if(1===e.tag){var n=e.type;if(Ta(n))return Da(e,n,t)}return t}function Ls(e,t,n,r,a,l,i,o,u){return(e=Ps(n,r,!0,e,0,l,0,o,u)).context=Ns(null),n=e.current,(l=tl(r=Uu(),a=Bu(n))).callback=null!=t?t:null,nl(n,l),e.current.lanes=a,gt(e,a,r),Wu(e,r),e}function Ds(e,t,n,r){var a=t.current,l=Uu(),i=Bu(a);return n=Ns(n),null===t.context?t.context=n:t.pendingContext=n,(t=tl(l,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),nl(a,t),null!==(e=Vu(a,i,l))&&rl(e,a,i),i}function zs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Os(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ms(e,t){Os(e,t),(e=e.alternate)&&Os(e,t)}fu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||xa.current)vo=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return vo=!1,function(e,t,n){switch(t.tag){case 3:Io(t),Rl();break;case 5:Jl(t);break;case 1:Ta(t.type)&&za(t);break;case 4:Yl(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ea(Ba,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ea(ei,1&ei.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Lo(e,t,n):(Ea(ei,1&ei.current),null!==(e=$o(e,t,n))?e.sibling:null);Ea(ei,1&ei.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Ao(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ea(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,So(e,t,n)}return $o(e,t,n)}(e,t,n);vo=0!=(131072&e.flags)}else vo=!1,Tl&&0!=(1048576&t.flags)&&Cl(t,vl,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Pa(t,_a.current);Ga(t,n),a=gi(null,t,r,e,a,n);var i=vi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ta(r)?(i=!0,za(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Za(t),a.updater=sl,t.stateNode=a,a._reactInternals=t,pl(t,r,e,n),t=xo(null,t,r,!0,i,n)):(t.tag=0,Tl&&i&&_l(t),yo(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return ws(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===L)return 14}return 2}(r),e=Ua(r,e),a){case 0:t=Co(null,t,r,e,n);break e;case 1:t=_o(null,t,r,e,n);break e;case 11:t=bo(null,t,r,e,n);break e;case 14:t=wo(null,t,r,Ua(r.type,e),n);break e}throw Error(l(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Co(e,t,r,a=t.elementType===r?a:Ua(r,a),n);case 1:return r=t.type,a=t.pendingProps,_o(e,t,r,a=t.elementType===r?a:Ua(r,a),n);case 3:e:{if(Io(t),null===e)throw Error(l(387));r=t.pendingProps,a=(i=t.memoizedState).element,el(e,t),ll(t,r,null,n);var o=t.memoizedState;if(r=o.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:o.cache,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Po(e,t,r,n,a=Error(l(423)));break e}if(r!==a){t=Po(e,t,r,n,a=Error(l(424)));break e}for(Pl=ia(t.stateNode.containerInfo.firstChild),Il=t,Tl=!0,Nl=null,n=Hl(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Rl(),r===a){t=$o(e,t,n);break e}yo(e,t,r,n)}t=t.child}return t;case 5:return Jl(t),null===e&&Ol(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,Zr(r,a)?o=null:null!==i&&Zr(r,i)&&(t.flags|=32),Eo(e,t),yo(e,t,o,n),t.child;case 6:return null===e&&Ol(t),null;case 13:return Lo(e,t,n);case 4:return Yl(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Vl(t,null,r,n):yo(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,bo(e,t,r,a=t.elementType===r?a:Ua(r,a),n);case 7:return yo(e,t,t.pendingProps,n),t.child;case 8:case 12:return yo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value,Ea(Ba,r._currentValue),r._currentValue=o,null!==i)if(lr(i.value,o)){if(i.children===a.children&&!xa.current){t=$o(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){o=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=tl(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Ka(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(l(341));o.lanes|=n,null!==(u=o.alternate)&&(u.lanes|=n),Ka(o,n,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}yo(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ga(t,n),r=r(a=Ya(a)),t.flags|=1,yo(e,t,r,n),t.child;case 14:return a=Ua(r=t.type,t.pendingProps),wo(e,t,r,a=Ua(r.type,a),n);case 15:return ko(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ua(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Ta(r)?(e=!0,za(t)):e=!1,Ga(t,n),fl(t,r,a),pl(t,r,a,n),xo(null,t,r,!0,e,n);case 19:return Ao(e,t,n);case 22:return So(e,t,n)}throw Error(l(156,t.tag))};var Fs="function"==typeof reportError?reportError:function(e){console.error(e)};function Rs(e){this._internalRoot=e}function As(e){this._internalRoot=e}function $s(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Us(){}function Bs(e,t,n,r,a){var l=n._reactRootContainer;if(l){var i=l;if("function"==typeof a){var o=a;a=function(){var e=zs(i);o.call(e)}}Ds(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var l=r;r=function(){var e=zs(i);l.call(e)}}var i=Ls(t,r,e,0,null,!1,0,"",Us);return e._reactRootContainer=i,e[fa]=i.current,jr(8===e.nodeType?e.parentNode:e),Ju(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var o=r;r=function(){var e=zs(u);o.call(e)}}var u=Ps(e,0,!1,null,0,!1,0,"",Us);return e._reactRootContainer=u,e[fa]=u.current,jr(8===e.nodeType?e.parentNode:e),Ju((function(){Ds(t,u,n,r)})),u}(n,t,e,a,r);return zs(i)}As.prototype.render=Rs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Ds(e,t,null,null)},As.prototype.unmount=Rs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Ju((function(){Ds(null,e,null,null)})),t[fa]=null}},As.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&Ft(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(vt(t,1|n),Wu(t,Xe()),0==(6&gu)&&(Nu=Xe()+500,$a()))}break;case 13:var r=Uu();Ju((function(){return Vu(e,1,r)})),Ms(e,1)}},kt=function(e){13===e.tag&&(Vu(e,134217728,Uu()),Ms(e,134217728))},St=function(e){if(13===e.tag){var t=Uu(),n=Bu(e);Vu(e,n,t),Ms(e,n)}},Et=function(){return yt},Ct=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ya(r);if(!a)throw Error(l(90));q(r),J(r,a)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=Xu,Te=Ju;var Vs={usingClientEntryPoint:!1,Events:[ga,va,ya,xe,Ie,Xu]},Hs={findFiberByHostInstance:ma,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Ws={bundleType:Hs.bundleType,version:Hs.version,rendererPackageName:Hs.rendererPackageName,rendererConfig:Hs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:Hs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Qs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Qs.isDisabled&&Qs.supportsFiber)try{at=Qs.inject(Ws),lt=Qs}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vs,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$s(t))throw Error(l(200));return Ts(e,t,null,n)},t.createRoot=function(e,t){if(!$s(e))throw Error(l(299));var n=!1,r="",a=Fs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Ps(e,1,!1,null,0,n,0,r,a),e[fa]=t.current,jr(8===e.nodeType?e.parentNode:e),new Rs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return Ju(e)},t.hydrate=function(e,t,n){if(!js(t))throw Error(l(200));return Bs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!$s(e))throw Error(l(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",o=Fs;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Ls(t,null,e,1,null!=n?n:null,a,0,i,o),e[fa]=t.current,jr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new As(t)},t.render=function(e,t,n){if(!js(t))throw Error(l(200));return Bs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!js(e))throw Error(l(40));return!!e._reactRootContainer&&(Ju((function(){Bs(null,null,e,!1,(function(){e._reactRootContainer=null,e[fa]=null}))})),!0)},t.unstable_batchedUpdates=Xu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!js(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return Bs(e,t,n,!1,r)},t.version="18.0.0-fc46dba67-20220329"},116:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(748)},751:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S=Object.prototype.hasOwnProperty,E={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,r){var a,l={},i=null,o=null;if(null!=t)for(a in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,a)&&!C.hasOwnProperty(a)&&(l[a]=t[a]);var u=arguments.length-2;if(1===u)l.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];l.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===l[a]&&(l[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:o,props:l,_owner:E.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var I=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,a,l,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var u=!1;if(null===e)u=!0;else switch(o){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===l?"."+P(u,0):l,k(i)?(a="",null!=e&&(a=e.replace(I,"$&/")+"/"),T(i,t,a,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(I,"$&/")+"/")+e)),t.push(i)),1;if(u=0,l=""===l?".":l+":",k(e))for(var s=0;s<e.length;s++){var c=l+P(o=e[s],s);u+=T(o,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(o=e.next()).done;)u+=T(o=o.value,t,a,c=l+P(o,s++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function L(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var D={current:null},z={transition:null},O={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:z,ReactCurrentOwner:E};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=l,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=m({},e.props),l=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=E.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!C.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:l,ref:i,props:a,_owner:o}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=z.transition;z.transition={};try{e()}finally{z.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return D.current.useCallback(e,t)},t.useContext=function(e){return D.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return D.current.useDeferredValue(e)},t.useEffect=function(e,t){return D.current.useEffect(e,t)},t.useId=function(){return D.current.useId()},t.useImperativeHandle=function(e,t,n){return D.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return D.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return D.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return D.current.useMemo(e,t)},t.useReducer=function(e,t,n){return D.current.useReducer(e,t,n)},t.useRef=function(e){return D.current.useRef(e)},t.useState=function(e){return D.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return D.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return D.current.useTransition()},t.version="18.0.0-fc46dba67-20220329"},466:(e,t,n)=>{e.exports=n(751)},794:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var o=2*(r+1)-1,u=e[o],s=o+1,c=e[s];if(0>l(u,n))s<a&&0>l(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[o]=n,r=o);else{if(!(s<a&&0>l(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,u=o.now();t.unstable_now=function(){return o.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,z(S);else{var t=r(c);null!==t&&O(k,t.startTime-e)}}function S(e,n){m=!1,g&&(g=!1,y(x),x=-1),h=!0;var l=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!T());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var o=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?d.callback=o:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&O(k,f.startTime-n),u=!1}return u}finally{d=null,p=l,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,C=!1,_=null,x=-1,I=5,P=-1;function T(){return!(t.unstable_now()-P<I)}function N(){if(null!==_){var e=t.unstable_now();P=e;var n=!0;try{n=_(!0,e)}finally{n?E():(C=!1,_=null)}}else C=!1}if("function"==typeof b)E=function(){b(N)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,D=L.port2;L.port1.onmessage=N,E=function(){D.postMessage(null)}}else E=function(){v(N,0)};function z(e){_=e,C||(C=!0,E())}function O(e,n){x=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,z(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):I=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var i=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?i+l:i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:l,expirationTime:o=l+o,sortIndex:-1},l>i?(e.sortIndex=l,n(c,e),null===r(s)&&e===r(c)&&(g?(y(x),x=-1):g=!0,O(k,l-i))):(e.sortIndex=o,n(s,e),m||h||(m=!0,z(S))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},767:(e,t,n)=>{e.exports=n(794)}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var l=t[r]={exports:{}};return e[r](l,l.exports,n),l.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e,t=n(466),r=n(116);function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));var l="beforeunload";function i(e){e.preventDefault(),e.returnValue=""}function o(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function u(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,a=void 0===r?"":r,l=e.hash,i=void 0===l?"":l;return a&&"?"!==a&&(n+="?"===a.charAt(0)?a:"?"+a),i&&"#"!==i&&(n+="#"===i.charAt(0)?i:"#"+i),n}function s(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}const c=(0,t.createContext)(null),f=(0,t.createContext)(null),d=(0,t.createContext)({outlet:null,matches:[]});function p(e,t){if(!e)throw new Error(t)}function h(e,t,n){void 0===n&&(n="/");let r=S(("string"==typeof t?s(t):t).pathname||"/",n);if(null==r)return null;let a=m(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let l=null;for(let e=0;null==l&&e<a.length;++e)l=b(a[e],r);return l}function m(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,a)=>{let l={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};l.relativePath.startsWith("/")&&(l.relativePath.startsWith(r)||p(!1),l.relativePath=l.relativePath.slice(r.length));let i=E([r,l.relativePath]),o=n.concat(l);e.children&&e.children.length>0&&(!0===e.index&&p(!1),m(e.children,t,o,i)),(null!=e.path||e.index)&&t.push({path:i,score:y(i,e.index),routesMeta:o})})),t}const g=/^:\w+$/,v=e=>"*"===e;function y(e,t){let n=e.split("/"),r=n.length;return n.some(v)&&(r+=-2),t&&(r+=2),n.filter((e=>!v(e))).reduce(((e,t)=>e+(g.test(t)?3:""===t?1:10)),r)}function b(e,t){let{routesMeta:n}=e,r={},a="/",l=[];for(let e=0;e<n.length;++e){let i=n[e],o=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",s=w({path:i.relativePath,caseSensitive:i.caseSensitive,end:o},u);if(!s)return null;Object.assign(r,s.params);let c=i.route;l.push({params:r,pathname:E([a,s.pathname]),pathnameBase:C(E([a,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(a=E([a,s.pathnameBase]))}return l}function w(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):a+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let l=a[0],i=l.replace(/(.)\/+$/,"$1"),o=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=o[n]||"";i=l.slice(0,l.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(o[n]||""),e}),{}),pathname:l,pathnameBase:i,pattern:e}}function k(e,t,n){let r,a="string"==typeof e?s(e):e,l=""===e||""===a.pathname?"/":a.pathname;if(null==l)r=n;else{let e=t.length-1;if(l.startsWith("..")){let t=l.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}r=e>=0?t[e]:"/"}let i=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?s(e):e,l=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:l,search:_(r),hash:x(a)}}(a,r);return l&&"/"!==l&&l.endsWith("/")&&!i.pathname.endsWith("/")&&(i.pathname+="/"),i}function S(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const E=e=>e.join("/").replace(/\/\/+/g,"/"),C=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),_=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",x=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function I(){return null!=(0,t.useContext)(f)}function P(){return I()||p(!1),(0,t.useContext)(f).location}function T(e){let{matches:n}=(0,t.useContext)(d),{pathname:r}=P(),a=JSON.stringify(n.map((e=>e.pathnameBase)));return(0,t.useMemo)((()=>k(e,JSON.parse(a),r)),[e,a,r])}function N(e){p(!1)}function L(n){let{basename:r="/",children:a=null,location:l,navigationType:i=e.Pop,navigator:o,static:u=!1}=n;I()&&p(!1);let d=C(r),h=(0,t.useMemo)((()=>({basename:d,navigator:o,static:u})),[d,o,u]);"string"==typeof l&&(l=s(l));let{pathname:m="/",search:g="",hash:v="",state:y=null,key:b="default"}=l,w=(0,t.useMemo)((()=>{let e=S(m,d);return null==e?null:{pathname:e,search:g,hash:v,state:y,key:b}}),[d,m,g,v,y,b]);return null==w?null:(0,t.createElement)(c.Provider,{value:h},(0,t.createElement)(f.Provider,{children:a,value:{location:w,navigationType:i}}))}function D(e){let{children:n,location:r}=e;return function(e,n){I()||p(!1);let{matches:r}=(0,t.useContext)(d),a=r[r.length-1],l=a?a.params:{},i=(a&&a.pathname,a?a.pathnameBase:"/");a&&a.route;let o,u=P();if(n){var c;let e="string"==typeof n?s(n):n;"/"===i||(null==(c=e.pathname)?void 0:c.startsWith(i))||p(!1),o=e}else o=u;let f=o.pathname||"/",m=h(e,{pathname:"/"===i?f:f.slice(i.length)||"/"});return function(e,n){return void 0===n&&(n=[]),null==e?null:e.reduceRight(((r,a,l)=>(0,t.createElement)(d.Provider,{children:void 0!==a.route.element?a.route.element:r,value:{outlet:r,matches:n.concat(e.slice(0,l+1))}})),null)}(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},l,e.params),pathname:E([i,e.pathname]),pathnameBase:"/"===e.pathnameBase?i:E([i,e.pathnameBase])}))),r)}(z(n),r)}function z(e){let n=[];return t.Children.forEach(e,(e=>{if(!(0,t.isValidElement)(e))return;if(e.type===t.Fragment)return void n.push.apply(n,z(e.props.children));e.type!==N&&p(!1);let r={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(r.children=z(e.props.children)),n.push(r)})),n}function O(){return O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},O.apply(this,arguments)}const M=["onClick","reloadDocument","replace","state","target","to"];function F(n){let{basename:r,children:c,window:f}=n,d=(0,t.useRef)();null==d.current&&(d.current=function(t){void 0===t&&(t={});var n=t.window,r=void 0===n?document.defaultView:n,c=r.history;function f(){var e=r.location,t=e.pathname,n=e.search,a=e.hash,l=c.state||{};return[l.idx,{pathname:t,search:n,hash:a,state:l.usr||null,key:l.key||"default"}]}var d=null;r.addEventListener("popstate",(function(){if(d)y.call(d),d=null;else{var t=e.Pop,n=f(),r=n[0],a=n[1];if(y.length){if(null!=r){var l=m-r;l&&(d={action:t,location:a,retry:function(){C(-1*l)}},C(l))}}else E(t)}}));var p=e.Pop,h=f(),m=h[0],g=h[1],v=o(),y=o();function b(e){return"string"==typeof e?e:u(e)}function w(e,t){return void 0===t&&(t=null),a({pathname:g.pathname,hash:"",search:""},"string"==typeof e?s(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function k(e,t){return[{usr:e.state,key:e.key,idx:t},b(e)]}function S(e,t,n){return!y.length||(y.call({action:e,location:t,retry:n}),!1)}function E(e){p=e;var t=f();m=t[0],g=t[1],v.call({action:p,location:g})}function C(e){c.go(e)}null==m&&(m=0,c.replaceState(a({},c.state,{idx:m}),""));var _={get action(){return p},get location(){return g},createHref:b,push:function t(n,a){var l=e.Push,i=w(n,a);if(S(l,i,(function(){t(n,a)}))){var o=k(i,m+1),u=o[0],s=o[1];try{c.pushState(u,"",s)}catch(e){r.location.assign(s)}E(l)}},replace:function t(n,r){var a=e.Replace,l=w(n,r);if(S(a,l,(function(){t(n,r)}))){var i=k(l,m),o=i[0],u=i[1];c.replaceState(o,"",u),E(a)}},go:C,back:function(){C(-1)},forward:function(){C(1)},listen:function(e){return v.push(e)},block:function(e){var t=y.push(e);return 1===y.length&&r.addEventListener(l,i),function(){t(),y.length||r.removeEventListener(l,i)}}};return _}({window:f}));let p=d.current,[h,m]=(0,t.useState)({action:p.action,location:p.location});return(0,t.useLayoutEffect)((()=>p.listen(m)),[p]),(0,t.createElement)(L,{basename:r,children:c,location:h.location,navigationType:h.action,navigator:p})}const R=(0,t.forwardRef)((function(e,n){let{onClick:r,reloadDocument:a,replace:l=!1,state:i,target:o,to:f}=e,h=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,M),m=function(e){I()||p(!1);let{basename:n,navigator:r}=(0,t.useContext)(c),{hash:a,pathname:l,search:i}=T(e),o=l;if("/"!==n){let t=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?s(e).pathname:e.pathname}(e),r=null!=t&&t.endsWith("/");o="/"===l?n+(r?"/":""):E([n,l])}return r.createHref({pathname:o,search:i,hash:a})}(f),g=function(e,n){let{target:r,replace:a,state:l}=void 0===n?{}:n,i=function(){I()||p(!1);let{basename:e,navigator:n}=(0,t.useContext)(c),{matches:r}=(0,t.useContext)(d),{pathname:a}=P(),l=JSON.stringify(r.map((e=>e.pathnameBase))),i=(0,t.useRef)(!1);return(0,t.useEffect)((()=>{i.current=!0})),(0,t.useCallback)((function(t,r){if(void 0===r&&(r={}),!i.current)return;if("number"==typeof t)return void n.go(t);let o=k(t,JSON.parse(l),a);"/"!==e&&(o.pathname=E([e,o.pathname])),(r.replace?n.replace:n.push)(o,r.state)}),[e,n,l,a])}(),o=P(),s=T(e);return(0,t.useCallback)((t=>{if(!(0!==t.button||r&&"_self"!==r||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(t))){t.preventDefault();let n=!!a||u(o)===u(s);i(e,{replace:n,state:l})}}),[o,i,s,a,l,r,e])}(f,{replace:l,state:i,target:o});return(0,t.createElement)("a",O({},h,{href:m,onClick:function(e){r&&r(e),e.defaultPrevented||a||g(e)},ref:n,target:o}))}));function A(){return t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("h2",null,"React 練習專案")),t.createElement("main",null,"歡迎光臨我的頁面"),t.createElement("button",null,t.createElement(R,{to:"/list"},"點此開始")))}var $,j=new Uint8Array(16);function U(){if(!$&&!($="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return $(j)}const B=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,V=function(e){return"string"==typeof e&&B.test(e)};for(var H=[],W=0;W<256;++W)H.push((W+256).toString(16).substr(1));const Q=function(e,t,n){var r=(e=e||{}).random||(e.rng||U)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var a=0;a<16;++a)t[n+a]=r[a];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(H[e[t+0]]+H[e[t+1]]+H[e[t+2]]+H[e[t+3]]+"-"+H[e[t+4]]+H[e[t+5]]+"-"+H[e[t+6]]+H[e[t+7]]+"-"+H[e[t+8]]+H[e[t+9]]+"-"+H[e[t+10]]+H[e[t+11]]+H[e[t+12]]+H[e[t+13]]+H[e[t+14]]+H[e[t+15]]).toLowerCase();if(!V(n))throw TypeError("Stringified UUID is invalid");return n}(r)};function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function K(e){var n=e.setTodos,r=(0,t.useRef)();return t.createElement(t.Fragment,null,t.createElement("input",{ref:r,type:"text"}),t.createElement("button",{onClick:function(e){var t=r.current.value;""!==t&&(n((function(e){return[].concat(function(e){if(Array.isArray(e))return q(e)}(n=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return q(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[{id:Q(),name:t,complete:!1}]);var n})),r.current.value=null)}},t.createElement(R,{to:""},"新增紀錄")),t.createElement("hr",null))}function G(e){var n=e.todo,r=e.deleteTodo;return t.createElement(t.Fragment,null,t.createElement("div",{className:"todos"},t.createElement("label",null,n.name),t.createElement("button",{onClick:function(){r(n.id)}},t.createElement(R,{to:""},"刪除"))))}function Y(e){var n=e.todos,r=e.deleteTodo;return n.map((function(e){return t.createElement(G,{key:e.id,todo:e,deleteTodo:r})}))}function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var J="todoApp.todos";function Z(){var e=function(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,l=[],i=!0,o=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(l.push(r.value),!t||l.length!==t);i=!0);}catch(e){o=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(o)throw a}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}((0,t.useState)([]),2),n=e[0],r=e[1];return(0,t.useEffect)((function(){var e=JSON.parse(localStorage.getItem(J));console.log(e),e&&r(e)}),[]),(0,t.useEffect)((function(){console.log("todos in localStorage:",n),localStorage.setItem(J,JSON.stringify(n))}),[n]),t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("h2",null,"My To-Do List")),t.createElement(K,{setTodos:r}),t.createElement(Y,{todos:n,deleteTodo:function(e){var t=n.filter((function(t){return t.id!=e}));console.log("newTodos ",t),r(t)}}),t.createElement("hr",null),t.createElement("div",{className:"txt"}," ",n.filter((function(e){return!e.complete})).length," Left to Do"),t.createElement("hr",null),t.createElement("button",null,t.createElement(R,{to:"/"},"返回首頁")))}function ee(){return t.createElement("div",null,"NotFoundPage")}const te=function(){return t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("h3",null,"代辦清單")),t.createElement(D,null,t.createElement(N,{path:"*",element:t.createElement(ee,null)}),t.createElement(N,{path:"/",element:t.createElement(A,null)}),t.createElement(N,{path:"/list",element:t.createElement(Z,null)})))},ne=function(e){const t=[];let n=0;for(let r=0;r<e.length;r++){let a=e.charCodeAt(r);a<128?t[n++]=a:a<2048?(t[n++]=a>>6|192,t[n++]=63&a|128):55296==(64512&a)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++r)),t[n++]=a>>18|240,t[n++]=a>>12&63|128,t[n++]=a>>6&63|128,t[n++]=63&a|128):(t[n++]=a>>12|224,t[n++]=a>>6&63|128,t[n++]=63&a|128)}return t},re={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[];for(let t=0;t<e.length;t+=3){const a=e[t],l=t+1<e.length,i=l?e[t+1]:0,o=t+2<e.length,u=o?e[t+2]:0,s=a>>2,c=(3&a)<<4|i>>4;let f=(15&i)<<2|u>>6,d=63&u;o||(d=64,l||(f=64)),r.push(n[s],n[c],n[f],n[d])}return r.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(ne(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,r=0;for(;n<e.length;){const a=e[n++];if(a<128)t[r++]=String.fromCharCode(a);else if(a>191&&a<224){const l=e[n++];t[r++]=String.fromCharCode((31&a)<<6|63&l)}else if(a>239&&a<365){const l=((7&a)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(l>>10)),t[r++]=String.fromCharCode(56320+(1023&l))}else{const l=e[n++],i=e[n++];t[r++]=String.fromCharCode((15&a)<<12|(63&l)<<6|63&i)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[];for(let t=0;t<e.length;){const a=n[e.charAt(t++)],l=t<e.length?n[e.charAt(t)]:0;++t;const i=t<e.length?n[e.charAt(t)]:64;++t;const o=t<e.length?n[e.charAt(t)]:64;if(++t,null==a||null==l||null==i||null==o)throw Error();const u=a<<2|l>>4;if(r.push(u),64!==i){const e=l<<4&240|i>>2;if(r.push(e),64!==o){const e=i<<6&192|o;r.push(e)}}}return r},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},ae=function(e){return function(e){const t=ne(e);return re.encodeByteArray(t,!0)}(e).replace(/\./g,"")};class le{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function ie(){return"object"==typeof indexedDB}function oe(){return new Promise(((e,t)=>{try{let n=!0;const r="validate-browser-context-for-indexeddb-analytics-module",a=self.indexedDB.open(r);a.onsuccess=()=>{a.result.close(),n||self.indexedDB.deleteDatabase(r),e(!0)},a.onupgradeneeded=()=>{n=!1},a.onerror=()=>{var e;t((null===(e=a.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}class ue extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,ue.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,se.prototype.create)}}class se{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},r=`${this.service}/${e}`,a=this.errors[e],l=a?function(e,t){return e.replace(ce,((e,n)=>{const r=t[n];return null!=r?String(r):`<${n}?>`}))}(a,n):"Error",i=`${this.serviceName}: ${l} (${r}).`;return new ue(r,i,n)}}const ce=/\{\$([^}]+)}/g;function fe(e,t){if(e===t)return!0;const n=Object.keys(e),r=Object.keys(t);for(const a of n){if(!r.includes(a))return!1;const n=e[a],l=t[a];if(de(n)&&de(l)){if(!fe(n,l))return!1}else if(n!==l)return!1}for(const e of r)if(!n.includes(e))return!1;return!0}function de(e){return null!==e&&"object"==typeof e}function pe(e,t=1e3,n=2){const r=t*Math.pow(n,e),a=Math.round(.5*r*(Math.random()-.5)*2);return Math.min(144e5,r+a)}function he(e){return e&&e._delegate?e._delegate:e}function me(e,t){return new Promise(((n,r)=>{e.onsuccess=e=>{n(e.target.result)},e.onerror=e=>{var n;r(`${t}: ${null===(n=e.target.error)||void 0===n?void 0:n.message}`)}}))}class ge{constructor(e){this._db=e,this.objectStoreNames=this._db.objectStoreNames}transaction(e,t="readonly"){return new ve(this._db.transaction.call(this._db,e,t))}createObjectStore(e,t){return new ye(this._db.createObjectStore(e,t))}close(){this._db.close()}}class ve{constructor(e){this._transaction=e,this.complete=new Promise(((e,t)=>{this._transaction.oncomplete=function(){e()},this._transaction.onerror=()=>{t(this._transaction.error)},this._transaction.onabort=()=>{t(this._transaction.error)}}))}objectStore(e){return new ye(this._transaction.objectStore(e))}}class ye{constructor(e){this._store=e}index(e){return new be(this._store.index(e))}createIndex(e,t,n){return new be(this._store.createIndex(e,t,n))}get(e){return me(this._store.get(e),"Error reading from IndexedDB")}put(e,t){return me(this._store.put(e,t),"Error writing to IndexedDB")}delete(e){return me(this._store.delete(e),"Error deleting from IndexedDB")}clear(){return me(this._store.clear(),"Error clearing IndexedDB object store")}}class be{constructor(e){this._index=e}get(e){return me(this._index.get(e),"Error reading from IndexedDB")}}function we(e,t,n){return new Promise(((r,a)=>{try{const l=indexedDB.open(e,t);l.onsuccess=e=>{r(new ge(e.target.result))},l.onerror=e=>{var t;a(`Error opening indexedDB: ${null===(t=e.target.error)||void 0===t?void 0:t.message}`)},l.onupgradeneeded=e=>{n(new ge(l.result),e.oldVersion,e.newVersion,new ve(l.transaction))}}catch(e){a(`Error opening indexedDB: ${e.message}`)}}))}class ke{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const Se="[DEFAULT]";class Ee{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new le;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),r=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(r)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:Se})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const r=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(r);return r}onInit(e,t){var n;const r=this.normalizeInstanceIdentifier(t),a=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;a.add(e),this.onInitCallbacks.set(r,a);const l=this.instances.get(r);return l&&e(l,r),()=>{a.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const r of n)try{r(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(r=e,r===Se?void 0:r),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var r;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:Se:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class Ce{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new Ee(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const _e=[];var xe;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(xe||(xe={}));const Ie={debug:xe.DEBUG,verbose:xe.VERBOSE,info:xe.INFO,warn:xe.WARN,error:xe.ERROR,silent:xe.SILENT},Pe=xe.INFO,Te={[xe.DEBUG]:"log",[xe.VERBOSE]:"log",[xe.INFO]:"info",[xe.WARN]:"warn",[xe.ERROR]:"error"},Ne=(e,t,...n)=>{if(t<e.logLevel)return;const r=(new Date).toISOString(),a=Te[t];if(!a)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[a](`[${r}]  ${e.name}:`,...n)};class Le{constructor(e){this.name=e,this._logLevel=Pe,this._logHandler=Ne,this._userLogHandler=null,_e.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in xe))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?Ie[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,xe.DEBUG,...e),this._logHandler(this,xe.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,xe.VERBOSE,...e),this._logHandler(this,xe.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,xe.INFO,...e),this._logHandler(this,xe.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,xe.WARN,...e),this._logHandler(this,xe.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,xe.ERROR,...e),this._logHandler(this,xe.ERROR,...e)}}class De{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const ze="@firebase/app",Oe="0.7.22",Me=new Le("@firebase/app"),Fe={[ze]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},Re=new Map,Ae=new Map;function $e(e,t){try{e.container.addComponent(t)}catch(n){Me.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function je(e){const t=e.name;if(Ae.has(t))return Me.debug(`There were multiple attempts to register component ${t}.`),!1;Ae.set(t,e);for(const t of Re.values())$e(t,e);return!0}function Ue(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const Be=new se("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","storage-open":"Error thrown when opening storage. Original error: {$originalErrorMessage}.","storage-get":"Error thrown when reading from storage. Original error: {$originalErrorMessage}.","storage-set":"Error thrown when writing to storage. Original error: {$originalErrorMessage}.","storage-delete":"Error thrown when deleting from storage. Original error: {$originalErrorMessage}."});class Ve{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new ke("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw Be.create("app-deleted",{appName:this._name})}}function He(e,t,n){var r;let a=null!==(r=Fe[e])&&void 0!==r?r:e;n&&(a+=`-${n}`);const l=a.match(/\s|\//),i=t.match(/\s|\//);if(l||i){const e=[`Unable to register library "${a}" with version "${t}":`];return l&&e.push(`library name "${a}" contains illegal characters (whitespace or "/")`),l&&i&&e.push("and"),i&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void Me.warn(e.join(" "))}je(new ke(`${a}-version`,(()=>({library:a,version:t})),"VERSION"))}const We="firebase-heartbeat-store";let Qe=null;function qe(){return Qe||(Qe=we("firebase-heartbeat-database",1,((e,t)=>{0===t&&e.createObjectStore(We)})).catch((e=>{throw Be.create("storage-open",{originalErrorMessage:e.message})}))),Qe}async function Ke(e,t){try{const n=(await qe()).transaction(We,"readwrite"),r=n.objectStore(We);return await r.put(t,Ge(e)),n.complete}catch(e){throw Be.create("storage-set",{originalErrorMessage:e.message})}}function Ge(e){return`${e.name}!${e.options.appId}`}class Ye{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Je(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=Xe();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=Xe(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let r=e.slice();for(const a of e){const e=n.find((e=>e.agent===a.agent));if(e){if(e.dates.push(a.date),Ze(n)>t){e.dates.pop();break}}else if(n.push({agent:a.agent,dates:[a.date]}),Ze(n)>t){n.pop();break}r=r.slice(1)}return{heartbeatsToSend:n,unsentEntries:r}}(this._heartbeatsCache.heartbeats),r=ae(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),r}}function Xe(){return(new Date).toISOString().substring(0,10)}class Je{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!ie()&&oe().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{return(await qe()).transaction(We).objectStore(We).get(Ge(e))}catch(e){throw Be.create("storage-get",{originalErrorMessage:e.message})}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return Ke(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return Ke(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Ze(e){return ae(JSON.stringify({version:2,heartbeats:e})).length}je(new ke("platform-logger",(e=>new De(e)),"PRIVATE")),je(new ke("heartbeat",(e=>new Ye(e)),"PRIVATE")),He(ze,Oe,""),He(ze,Oe,"esm2017"),He("fire-js",""),He("firebase","9.7.0","app");const et="@firebase/installations",tt="0.5.8",nt="w:0.5.8",rt=new se("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function at(e){return e instanceof ue&&e.code.includes("request-failed")}function lt({projectId:e}){return`https://firebaseinstallations.googleapis.com/v1/projects/${e}/installations`}function it(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function ot(e,t){const n=(await t.json()).error;return rt.create("request-failed",{requestName:e,serverCode:n.code,serverMessage:n.message,serverStatus:n.status})}function ut({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}async function st(e){const t=await e();return t.status>=500&&t.status<600?e():t}function ct(e){return new Promise((t=>{setTimeout(t,e)}))}const ft=/^[cdef][\w-]{21}$/;function dt(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){return(t=e,btoa(String.fromCharCode(...t)).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var t}(e);return ft.test(t)?t:""}catch(e){return""}}function pt(e){return`${e.appName}!${e.appId}`}const ht=new Map;function mt(e,t){const n=pt(e);gt(n,t),function(e,t){const n=(!vt&&"BroadcastChannel"in self&&(vt=new BroadcastChannel("[Firebase] FID Change"),vt.onmessage=e=>{gt(e.data.key,e.data.fid)}),vt);n&&n.postMessage({key:e,fid:t}),0===ht.size&&vt&&(vt.close(),vt=null)}(n,t)}function gt(e,t){const n=ht.get(e);if(n)for(const e of n)e(t)}let vt=null;const yt="firebase-installations-store";let bt=null;function wt(){return bt||(bt=we("firebase-installations-database",1,((e,t)=>{0===t&&e.createObjectStore(yt)}))),bt}async function kt(e,t){const n=pt(e),r=(await wt()).transaction(yt,"readwrite"),a=r.objectStore(yt),l=await a.get(n);return await a.put(t,n),await r.complete,l&&l.fid===t.fid||mt(e,t.fid),t}async function St(e){const t=pt(e),n=(await wt()).transaction(yt,"readwrite");await n.objectStore(yt).delete(t),await n.complete}async function Et(e,t){const n=pt(e),r=(await wt()).transaction(yt,"readwrite"),a=r.objectStore(yt),l=await a.get(n),i=t(l);return void 0===i?await a.delete(n):await a.put(i,n),await r.complete,!i||l&&l.fid===i.fid||mt(e,i.fid),i}async function Ct(e){let t;const n=await Et(e.appConfig,(n=>{const r=function(e){return It(e||{fid:dt(),registrationStatus:0})}(n),a=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine)return{installationEntry:t,registrationPromise:Promise.reject(rt.create("app-offline"))};const n={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},r=async function(e,t){try{const n=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:n}){const r=lt(e),a=ut(e),l=t.getImmediate({optional:!0});if(l){const e=await l.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const i={fid:n,authVersion:"FIS_v2",appId:e.appId,sdkVersion:nt},o={method:"POST",headers:a,body:JSON.stringify(i)},u=await st((()=>fetch(r,o)));if(u.ok){const e=await u.json();return{fid:e.fid||n,registrationStatus:2,refreshToken:e.refreshToken,authToken:it(e.authToken)}}throw await ot("Create Installation",u)}(e,t);return kt(e.appConfig,n)}catch(n){throw at(n)&&409===n.customData.serverCode?await St(e.appConfig):await kt(e.appConfig,{fid:t.fid,registrationStatus:0}),n}}(e,n);return{installationEntry:n,registrationPromise:r}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:_t(e)}:{installationEntry:t}}(e,r);return t=a.registrationPromise,a.installationEntry}));return""===n.fid?{installationEntry:await t}:{installationEntry:n,registrationPromise:t}}async function _t(e){let t=await xt(e.appConfig);for(;1===t.registrationStatus;)await ct(100),t=await xt(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:n}=await Ct(e);return n||t}return t}function xt(e){return Et(e,(e=>{if(!e)throw rt.create("installation-not-found");return It(e)}))}function It(e){return 1===(t=e).registrationStatus&&t.registrationTime+1e4<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function Pt({appConfig:e,heartbeatServiceProvider:t},n){const r=function(e,{fid:t}){return`${lt(e)}/${t}/authTokens:generate`}(e,n),a=function(e,{refreshToken:t}){const n=ut(e);return n.append("Authorization",function(e){return`FIS_v2 ${e}`}(t)),n}(e,n),l=t.getImmediate({optional:!0});if(l){const e=await l.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const i={installation:{sdkVersion:nt,appId:e.appId}},o={method:"POST",headers:a,body:JSON.stringify(i)},u=await st((()=>fetch(r,o)));if(u.ok)return it(await u.json());throw await ot("Generate Auth Token",u)}async function Tt(e,t=!1){let n;const r=await Et(e.appConfig,(r=>{if(!Lt(r))throw rt.create("not-registered");const a=r.authToken;if(!t&&(2===(l=a).requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+36e5}(l)))return r;var l;if(1===a.requestStatus)return n=async function(e,t){let n=await Nt(e.appConfig);for(;1===n.authToken.requestStatus;)await ct(100),n=await Nt(e.appConfig);const r=n.authToken;return 0===r.requestStatus?Tt(e,t):r}(e,t),r;{if(!navigator.onLine)throw rt.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(r);return n=async function(e,t){try{const n=await Pt(e,t),r=Object.assign(Object.assign({},t),{authToken:n});return await kt(e.appConfig,r),n}catch(n){if(!at(n)||401!==n.customData.serverCode&&404!==n.customData.serverCode){const n=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await kt(e.appConfig,n)}else await St(e.appConfig);throw n}}(e,t),t}}));return n?await n:r.authToken}function Nt(e){return Et(e,(e=>{if(!Lt(e))throw rt.create("not-registered");return 1===(t=e.authToken).requestStatus&&t.requestTime+1e4<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var t}))}function Lt(e){return void 0!==e&&2===e.registrationStatus}function Dt(e){return rt.create("missing-app-config-values",{valueName:e})}const zt="installations";je(new ke(zt,(e=>{const t=e.getProvider("app").getImmediate(),n=function(e){if(!e||!e.options)throw Dt("App Configuration");if(!e.name)throw Dt("App Name");const t=["projectId","apiKey","appId"];for(const n of t)if(!e.options[n])throw Dt(n);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:n,heartbeatServiceProvider:Ue(t,"heartbeat"),_delete:()=>Promise.resolve()}}),"PUBLIC")),je(new ke("installations-internal",(e=>{const t=Ue(e.getProvider("app").getImmediate(),zt).getImmediate();return{getId:()=>async function(e){const t=e,{installationEntry:n,registrationPromise:r}=await Ct(t);return r?r.catch(console.error):Tt(t).catch(console.error),n.fid}(t),getToken:e=>async function(e,t=!1){const n=e;return await async function(e){const{registrationPromise:t}=await Ct(e);t&&await t}(n),(await Tt(n,t)).token}(t,e)}}),"PRIVATE")),He(et,tt),He(et,tt,"esm2017");const Ot="analytics",Mt="https://www.googletagmanager.com/gtag/js",Ft=new Le("@firebase/analytics");function Rt(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}const At=new se("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.'}),$t=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function jt(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function Ut(e,t=$t,n){const{appId:r,apiKey:a,measurementId:l}=e.options;if(!r)throw At.create("no-app-id");if(!a){if(l)return{measurementId:l,appId:r};throw At.create("no-api-key")}const i=t.getThrottleMetadata(r)||{backoffCount:0,throttleEndTimeMillis:Date.now()},o=new Vt;return setTimeout((async()=>{o.abort()}),void 0!==n?n:6e4),Bt({appId:r,apiKey:a,measurementId:l},i,o,t)}async function Bt(e,{throttleEndTimeMillis:t,backoffCount:n},r,a=$t){const{appId:l,measurementId:i}=e;try{await function(e,t){return new Promise(((n,r)=>{const a=Math.max(t-Date.now(),0),l=setTimeout(n,a);e.addEventListener((()=>{clearTimeout(l),r(At.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(r,t)}catch(e){if(i)return Ft.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${i} provided in the "measurementId" field in the local Firebase config. [${e.message}]`),{appId:l,measurementId:i};throw e}try{const t=await async function(e){var t;const{appId:n,apiKey:r}=e,a={method:"GET",headers:jt(r)},l="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),i=await fetch(l,a);if(200!==i.status&&304!==i.status){let e="";try{const n=await i.json();(null===(t=n.error)||void 0===t?void 0:t.message)&&(e=n.error.message)}catch(e){}throw At.create("config-fetch-failed",{httpStatus:i.status,responseMessage:e})}return i.json()}(e);return a.deleteThrottleMetadata(l),t}catch(t){if(!function(e){if(!(e instanceof ue&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(t)){if(a.deleteThrottleMetadata(l),i)return Ft.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${i} provided in the "measurementId" field in the local Firebase config. [${t.message}]`),{appId:l,measurementId:i};throw t}const o=503===Number(t.customData.httpStatus)?pe(n,a.intervalMillis,30):pe(n,a.intervalMillis),u={throttleEndTimeMillis:Date.now()+o,backoffCount:n+1};return a.setThrottleMetadata(l,u),Ft.debug(`Calling attemptFetch again in ${o} millis`),Bt(e,u,r,a)}}class Vt{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}class Ht{constructor(e){this.app=e}_delete(){return delete Wt[this.app.options.appId],Promise.resolve()}}let Wt={},Qt=[];const qt={};let Kt,Gt,Yt="dataLayer",Xt=!1;function Jt(e,t,n){!function(){const e=[];if(function(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}()&&e.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),n=At.create("invalid-analytics-context",{errorInfo:t});Ft.warn(n.message)}}();const r=e.options.appId;if(!r)throw At.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw At.create("no-api-key");Ft.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=Wt[r])throw At.create("already-exists",{id:r});if(!Xt){!function(e){let t=[];Array.isArray(window.dataLayer)?t=window.dataLayer:window.dataLayer=t}();const{wrappedGtag:e,gtagCore:t}=function(e,t,n,r,a){let l=function(...e){window.dataLayer.push(arguments)};return window.gtag&&"function"==typeof window.gtag&&(l=window.gtag),window.gtag=function(e,t,n,r){return async function(a,l,i){try{"event"===a?await async function(e,t,n,r,a){try{let l=[];if(a&&a.send_to){let e=a.send_to;Array.isArray(e)||(e=[e]);const r=await Rt(n);for(const n of e){const e=r.find((e=>e.measurementId===n)),a=e&&t[e.appId];if(!a){l=[];break}l.push(a)}}0===l.length&&(l=Object.values(t)),await Promise.all(l),e("event",r,a||{})}catch(e){Ft.error(e)}}(e,t,n,l,i):"config"===a?await async function(e,t,n,r,a,l){const i=r[a];try{if(i)await t[i];else{const e=(await Rt(n)).find((e=>e.measurementId===a));e&&await t[e.appId]}}catch(e){Ft.error(e)}e("config",a,l)}(e,t,n,r,l,i):e("set",l)}catch(e){Ft.error(e)}}}(l,e,t,n),{gtagCore:l,wrappedGtag:window.gtag}}(Wt,Qt,qt);Gt=e,Kt=t,Xt=!0}return Wt[r]=async function(e,t,n,r,a,l,i){var o;const u=Ut(e);u.then((t=>{n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&Ft.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>Ft.error(e))),t.push(u);const s=async function(){if(!ie())return Ft.warn(At.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await oe()}catch(e){return Ft.warn(At.create("indexeddb-unavailable",{errorInfo:e}).message),!1}return!0}().then((e=>e?r.getId():void 0)),[c,f]=await Promise.all([u,s]);(function(){const e=window.document.getElementsByTagName("script");for(const t of Object.values(e))if(t.src&&t.src.includes(Mt))return t;return null})()||function(e,t){const n=document.createElement("script");n.src=`${Mt}?l=${e}&id=${t}`,n.async=!0,document.head.appendChild(n)}(l,c.measurementId),a("js",new Date);const d=null!==(o=null==i?void 0:i.config)&&void 0!==o?o:{};return d.origin="firebase",d.update=!0,null!=f&&(d.firebase_id=f),a("config",c.measurementId,d),c.measurementId}(e,Qt,qt,t,Kt,Yt,n),new Ht(e)}const Zt="@firebase/analytics",en="0.7.8";je(new ke(Ot,((e,{options:t})=>Jt(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),je(new ke("analytics-internal",(function(e){try{const t=e.getProvider(Ot).getImmediate();return{logEvent:(e,n,r)=>function(e,t,n,r){e=he(e),async function(e,t,n,r,a){if(a&&a.global)e("event",n,r);else{const a=await t;e("event",n,Object.assign(Object.assign({},r),{send_to:a}))}}(Gt,Wt[e.app.options.appId],t,n,r).catch((e=>Ft.error(e)))}(t,e,n,r)}}catch(e){throw At.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),He(Zt,en),He(Zt,en,"esm2017"),function(e=function(e="[DEFAULT]"){const t=Re.get(e);if(!t)throw Be.create("no-app",{appName:e});return t}()){const t=Ue(e=he(e),Ot);t.isInitialized()?t.getImmediate():function(e,t={}){const n=Ue(e,Ot);if(n.isInitialized()){const e=n.getImmediate();if(fe(t,n.getOptions()))return e;throw At.create("already-initialized")}n.initialize({options:t})}(e)}(function(e,t={}){"object"!=typeof t&&(t={name:t});const n=Object.assign({name:"[DEFAULT]",automaticDataCollectionEnabled:!1},t),r=n.name;if("string"!=typeof r||!r)throw Be.create("bad-app-name",{appName:String(r)});const a=Re.get(r);if(a){if(fe(e,a.options)&&fe(n,a.config))return a;throw Be.create("duplicate-app",{appName:r})}const l=new Ce(r);for(const e of Ae.values())l.addComponent(e);const i=new Ve(e,n,l);return Re.set(r,i),i}({apiKey:"AIzaSyA-OjWSLCF0xZlXb5Xp9odbZB7rCOn9ThI",authDomain:"my-todolist-project-27cc2.firebaseapp.com",projectId:"my-todolist-project-27cc2",storageBucket:"my-todolist-project-27cc2.appspot.com",messagingSenderId:"723261169042",appId:"1:723261169042:web:9d575839997e433df9354b",measurementId:"G-BLDTRLKXEM"})),console.log("test"),r.render(t.createElement(t.StrictMode,null,t.createElement(F,null,t.createElement(te,null))),document.querySelector("#root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,